
Buttons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002304  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000838  20000000  00402304  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000098  20000838  00402b3c  00020838  2**2
                  ALLOC
  3 .stack        00003000  200008d0  00402bd4  00020838  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020838  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020862  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000e0ab  00000000  00000000  000208bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fdb  00000000  00000000  0002e966  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000830  00000000  00000000  00030941  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  000140d3  00000000  00000000  00031171  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000bfcc  00000000  00000000  00045244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0005346d  00000000  00000000  00051210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005f5b  00000000  00000000  000a467d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000968  00000000  00000000  000aa5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001468  00000000  00000000  000aaf40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200038d0 	.word	0x200038d0
  400004:	00400d4d 	.word	0x00400d4d
  400008:	00400d49 	.word	0x00400d49
  40000c:	00400d49 	.word	0x00400d49
  400010:	00400d49 	.word	0x00400d49
  400014:	00400d49 	.word	0x00400d49
  400018:	00400d49 	.word	0x00400d49
	...
  40002c:	00400d49 	.word	0x00400d49
  400030:	00400d49 	.word	0x00400d49
  400034:	00000000 	.word	0x00000000
  400038:	00400d49 	.word	0x00400d49
  40003c:	00400d49 	.word	0x00400d49
  400040:	00400d49 	.word	0x00400d49
  400044:	00400d49 	.word	0x00400d49
  400048:	00400d49 	.word	0x00400d49
  40004c:	00400d49 	.word	0x00400d49
  400050:	00400d49 	.word	0x00400d49
  400054:	00400d49 	.word	0x00400d49
  400058:	00400d49 	.word	0x00400d49
  40005c:	00400d49 	.word	0x00400d49
  400060:	00400d49 	.word	0x00400d49
  400064:	00400d49 	.word	0x00400d49
  400068:	00000000 	.word	0x00000000
  40006c:	00400a15 	.word	0x00400a15
  400070:	00400a29 	.word	0x00400a29
  400074:	00400a3d 	.word	0x00400a3d
  400078:	00400d49 	.word	0x00400d49
  40007c:	00400d49 	.word	0x00400d49
	...
  400088:	00400d49 	.word	0x00400d49
  40008c:	00400d49 	.word	0x00400d49
  400090:	00400d49 	.word	0x00400d49
  400094:	00400d49 	.word	0x00400d49
  400098:	00400d49 	.word	0x00400d49
  40009c:	00400d49 	.word	0x00400d49
  4000a0:	00400d49 	.word	0x00400d49
  4000a4:	00400d49 	.word	0x00400d49
  4000a8:	00400d49 	.word	0x00400d49
  4000ac:	00400d49 	.word	0x00400d49
  4000b0:	00400d49 	.word	0x00400d49
  4000b4:	00400d49 	.word	0x00400d49
  4000b8:	00400d49 	.word	0x00400d49
  4000bc:	00400d49 	.word	0x00400d49
  4000c0:	00400d49 	.word	0x00400d49
  4000c4:	00400d49 	.word	0x00400d49
  4000c8:	00400d49 	.word	0x00400d49

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000838 	.word	0x20000838
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402304 	.word	0x00402304

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	2000083c 	.word	0x2000083c
  40011c:	00402304 	.word	0x00402304
  400120:	00402304 	.word	0x00402304
  400124:	00000000 	.word	0x00000000

00400128 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  400128:	b570      	push	{r4, r5, r6, lr}
  40012a:	b082      	sub	sp, #8
  40012c:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40012e:	ac02      	add	r4, sp, #8
  400130:	2302      	movs	r3, #2
  400132:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400136:	4d09      	ldr	r5, [pc, #36]	; (40015c <ssd1306_write_command+0x34>)
  400138:	4621      	mov	r1, r4
  40013a:	4628      	mov	r0, r5
  40013c:	4b08      	ldr	r3, [pc, #32]	; (400160 <ssd1306_write_command+0x38>)
  40013e:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400140:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400144:	4b07      	ldr	r3, [pc, #28]	; (400164 <ssd1306_write_command+0x3c>)
  400146:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400148:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  40014a:	2056      	movs	r0, #86	; 0x56
  40014c:	4b06      	ldr	r3, [pc, #24]	; (400168 <ssd1306_write_command+0x40>)
  40014e:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400150:	4621      	mov	r1, r4
  400152:	4628      	mov	r0, r5
  400154:	4b05      	ldr	r3, [pc, #20]	; (40016c <ssd1306_write_command+0x44>)
  400156:	4798      	blx	r3
#endif
}
  400158:	b002      	add	sp, #8
  40015a:	bd70      	pop	{r4, r5, r6, pc}
  40015c:	40008000 	.word	0x40008000
  400160:	004003ad 	.word	0x004003ad
  400164:	400e1200 	.word	0x400e1200
  400168:	20000001 	.word	0x20000001
  40016c:	004003d9 	.word	0x004003d9

00400170 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  400170:	b5f0      	push	{r4, r5, r6, r7, lr}
  400172:	b085      	sub	sp, #20
  400174:	4d25      	ldr	r5, [pc, #148]	; (40020c <ssd1306_init+0x9c>)
  400176:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  40017a:	636e      	str	r6, [r5, #52]	; 0x34
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
  40017c:	2056      	movs	r0, #86	; 0x56
  40017e:	4c24      	ldr	r4, [pc, #144]	; (400210 <ssd1306_init+0xa0>)
  400180:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400182:	632e      	str	r6, [r5, #48]	; 0x30
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
  400184:	2056      	movs	r0, #86	; 0x56
  400186:	47a0      	blx	r4
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
  400188:	2702      	movs	r7, #2
  40018a:	ae04      	add	r6, sp, #16
  40018c:	f846 7d04 	str.w	r7, [r6, #-4]!
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
  400190:	4c20      	ldr	r4, [pc, #128]	; (400214 <ssd1306_init+0xa4>)
  400192:	4620      	mov	r0, r4
  400194:	4b20      	ldr	r3, [pc, #128]	; (400218 <ssd1306_init+0xa8>)
  400196:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  400198:	2500      	movs	r5, #0
  40019a:	9500      	str	r5, [sp, #0]
  40019c:	4b1f      	ldr	r3, [pc, #124]	; (40021c <ssd1306_init+0xac>)
  40019e:	462a      	mov	r2, r5
  4001a0:	4631      	mov	r1, r6
  4001a2:	4620      	mov	r0, r4
  4001a4:	4e1e      	ldr	r6, [pc, #120]	; (400220 <ssd1306_init+0xb0>)
  4001a6:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4001a8:	2301      	movs	r3, #1
  4001aa:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4001ac:	20a8      	movs	r0, #168	; 0xa8
  4001ae:	4c1d      	ldr	r4, [pc, #116]	; (400224 <ssd1306_init+0xb4>)
  4001b0:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4001b2:	201f      	movs	r0, #31
  4001b4:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4001b6:	20d3      	movs	r0, #211	; 0xd3
  4001b8:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4001ba:	4628      	mov	r0, r5
  4001bc:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  4001be:	2040      	movs	r0, #64	; 0x40
  4001c0:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4001c2:	20a1      	movs	r0, #161	; 0xa1
  4001c4:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4001c6:	20c8      	movs	r0, #200	; 0xc8
  4001c8:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4001ca:	20da      	movs	r0, #218	; 0xda
  4001cc:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4001ce:	4638      	mov	r0, r7
  4001d0:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4001d2:	2081      	movs	r0, #129	; 0x81
  4001d4:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  4001d6:	208f      	movs	r0, #143	; 0x8f
  4001d8:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4001da:	20a4      	movs	r0, #164	; 0xa4
  4001dc:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4001de:	20a6      	movs	r0, #166	; 0xa6
  4001e0:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4001e2:	20d5      	movs	r0, #213	; 0xd5
  4001e4:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4001e6:	2080      	movs	r0, #128	; 0x80
  4001e8:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4001ea:	208d      	movs	r0, #141	; 0x8d
  4001ec:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4001ee:	2014      	movs	r0, #20
  4001f0:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4001f2:	20db      	movs	r0, #219	; 0xdb
  4001f4:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4001f6:	2040      	movs	r0, #64	; 0x40
  4001f8:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4001fa:	20d9      	movs	r0, #217	; 0xd9
  4001fc:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4001fe:	20f1      	movs	r0, #241	; 0xf1
  400200:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400202:	20af      	movs	r0, #175	; 0xaf
  400204:	47a0      	blx	r4

	ssd1306_display_on();
}
  400206:	b005      	add	sp, #20
  400208:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40020a:	bf00      	nop
  40020c:	400e1200 	.word	0x400e1200
  400210:	20000001 	.word	0x20000001
  400214:	40008000 	.word	0x40008000
  400218:	004002d9 	.word	0x004002d9
  40021c:	004c4b40 	.word	0x004c4b40
  400220:	0040032d 	.word	0x0040032d
  400224:	00400129 	.word	0x00400129

00400228 <ssd1306_write_text>:
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  400228:	7803      	ldrb	r3, [r0, #0]
  40022a:	2b00      	cmp	r3, #0
  40022c:	d047      	beq.n	4002be <ssd1306_write_text+0x96>
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(const char *string)
{
  40022e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400232:	b083      	sub	sp, #12
  400234:	4683      	mov	fp, r0
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  400236:	4e22      	ldr	r6, [pc, #136]	; (4002c0 <ssd1306_write_text+0x98>)
  400238:	f8df a094 	ldr.w	sl, [pc, #148]	; 4002d0 <ssd1306_write_text+0xa8>
  40023c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4002d4 <ssd1306_write_text+0xac>
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
  400240:	2b7e      	cmp	r3, #126	; 0x7e
  400242:	d835      	bhi.n	4002b0 <ssd1306_write_text+0x88>
			char_ptr = font_table[*string - 32];
  400244:	3b20      	subs	r3, #32
  400246:	4a1f      	ldr	r2, [pc, #124]	; (4002c4 <ssd1306_write_text+0x9c>)
  400248:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
			for (i = 1; i <= char_ptr[0]; i++) {
  40024c:	783b      	ldrb	r3, [r7, #0]
  40024e:	b1db      	cbz	r3, 400288 <ssd1306_write_text+0x60>
  400250:	2401      	movs	r4, #1
				ssd1306_write_data(char_ptr[i]);
  400252:	f817 8004 	ldrb.w	r8, [r7, r4]
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400256:	ad02      	add	r5, sp, #8
  400258:	2302      	movs	r3, #2
  40025a:	f845 3d04 	str.w	r3, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40025e:	4629      	mov	r1, r5
  400260:	4630      	mov	r0, r6
  400262:	47d0      	blx	sl
  400264:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400268:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40026c:	f8c6 800c 	str.w	r8, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  400270:	2056      	movs	r0, #86	; 0x56
  400272:	4b15      	ldr	r3, [pc, #84]	; (4002c8 <ssd1306_write_text+0xa0>)
  400274:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400276:	4629      	mov	r1, r5
  400278:	4630      	mov	r0, r6
  40027a:	4b14      	ldr	r3, [pc, #80]	; (4002cc <ssd1306_write_text+0xa4>)
  40027c:	4798      	blx	r3
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
  40027e:	3401      	adds	r4, #1
  400280:	b2e4      	uxtb	r4, r4
  400282:	783b      	ldrb	r3, [r7, #0]
  400284:	42a3      	cmp	r3, r4
  400286:	d2e4      	bcs.n	400252 <ssd1306_write_text+0x2a>
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400288:	ac02      	add	r4, sp, #8
  40028a:	2302      	movs	r3, #2
  40028c:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400290:	4621      	mov	r1, r4
  400292:	4630      	mov	r0, r6
  400294:	47d0      	blx	sl
  400296:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  40029a:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  40029e:	2300      	movs	r3, #0
  4002a0:	60f3      	str	r3, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4002a2:	2056      	movs	r0, #86	; 0x56
  4002a4:	4b08      	ldr	r3, [pc, #32]	; (4002c8 <ssd1306_write_text+0xa0>)
  4002a6:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4002a8:	4621      	mov	r1, r4
  4002aa:	4630      	mov	r0, r6
  4002ac:	4b07      	ldr	r3, [pc, #28]	; (4002cc <ssd1306_write_text+0xa4>)
  4002ae:	4798      	blx	r3
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  4002b0:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
  4002b4:	2b00      	cmp	r3, #0
  4002b6:	d1c3      	bne.n	400240 <ssd1306_write_text+0x18>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
  4002b8:	b003      	add	sp, #12
  4002ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002be:	4770      	bx	lr
  4002c0:	40008000 	.word	0x40008000
  4002c4:	20000034 	.word	0x20000034
  4002c8:	20000001 	.word	0x20000001
  4002cc:	004003d9 	.word	0x004003d9
  4002d0:	004003ad 	.word	0x004003ad
  4002d4:	400e1200 	.word	0x400e1200

004002d8 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4002d8:	b510      	push	{r4, lr}
  4002da:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4002dc:	4b10      	ldr	r3, [pc, #64]	; (400320 <spi_master_init+0x48>)
  4002de:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4002e0:	2380      	movs	r3, #128	; 0x80
  4002e2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4002e4:	6863      	ldr	r3, [r4, #4]
  4002e6:	f043 0301 	orr.w	r3, r3, #1
  4002ea:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4002ec:	6863      	ldr	r3, [r4, #4]
  4002ee:	f043 0310 	orr.w	r3, r3, #16
  4002f2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4002f4:	6863      	ldr	r3, [r4, #4]
  4002f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4002fa:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4002fc:	2100      	movs	r1, #0
  4002fe:	4620      	mov	r0, r4
  400300:	4b08      	ldr	r3, [pc, #32]	; (400324 <spi_master_init+0x4c>)
  400302:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400304:	6863      	ldr	r3, [r4, #4]
  400306:	f023 0302 	bic.w	r3, r3, #2
  40030a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  40030c:	6863      	ldr	r3, [r4, #4]
  40030e:	f023 0304 	bic.w	r3, r3, #4
  400312:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400314:	2100      	movs	r1, #0
  400316:	4620      	mov	r0, r4
  400318:	4b03      	ldr	r3, [pc, #12]	; (400328 <spi_master_init+0x50>)
  40031a:	4798      	blx	r3
  40031c:	bd10      	pop	{r4, pc}
  40031e:	bf00      	nop
  400320:	00400c11 	.word	0x00400c11
  400324:	00400c21 	.word	0x00400c21
  400328:	00400c39 	.word	0x00400c39

0040032c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  40032c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400330:	4604      	mov	r4, r0
  400332:	460d      	mov	r5, r1
  400334:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  400336:	4915      	ldr	r1, [pc, #84]	; (40038c <spi_master_setup_device+0x60>)
  400338:	4618      	mov	r0, r3
  40033a:	4b15      	ldr	r3, [pc, #84]	; (400390 <spi_master_setup_device+0x64>)
  40033c:	4798      	blx	r3
  40033e:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400340:	2300      	movs	r3, #0
  400342:	461a      	mov	r2, r3
  400344:	6829      	ldr	r1, [r5, #0]
  400346:	4620      	mov	r0, r4
  400348:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4003a8 <spi_master_setup_device+0x7c>
  40034c:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  40034e:	2208      	movs	r2, #8
  400350:	6829      	ldr	r1, [r5, #0]
  400352:	4620      	mov	r0, r4
  400354:	4b0f      	ldr	r3, [pc, #60]	; (400394 <spi_master_setup_device+0x68>)
  400356:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400358:	b2fa      	uxtb	r2, r7
  40035a:	6829      	ldr	r1, [r5, #0]
  40035c:	4620      	mov	r0, r4
  40035e:	4b0e      	ldr	r3, [pc, #56]	; (400398 <spi_master_setup_device+0x6c>)
  400360:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400362:	2208      	movs	r2, #8
  400364:	6829      	ldr	r1, [r5, #0]
  400366:	4620      	mov	r0, r4
  400368:	4b0c      	ldr	r3, [pc, #48]	; (40039c <spi_master_setup_device+0x70>)
  40036a:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  40036c:	0872      	lsrs	r2, r6, #1
  40036e:	6829      	ldr	r1, [r5, #0]
  400370:	4620      	mov	r0, r4
  400372:	4b0b      	ldr	r3, [pc, #44]	; (4003a0 <spi_master_setup_device+0x74>)
  400374:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400376:	f086 0201 	eor.w	r2, r6, #1
  40037a:	f002 0201 	and.w	r2, r2, #1
  40037e:	6829      	ldr	r1, [r5, #0]
  400380:	4620      	mov	r0, r4
  400382:	4b08      	ldr	r3, [pc, #32]	; (4003a4 <spi_master_setup_device+0x78>)
  400384:	4798      	blx	r3
  400386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40038a:	bf00      	nop
  40038c:	07270e00 	.word	0x07270e00
  400390:	00400ce5 	.word	0x00400ce5
  400394:	00400cd1 	.word	0x00400cd1
  400398:	00400cfd 	.word	0x00400cfd
  40039c:	00400c8d 	.word	0x00400c8d
  4003a0:	00400c4d 	.word	0x00400c4d
  4003a4:	00400c6d 	.word	0x00400c6d
  4003a8:	00400d25 	.word	0x00400d25

004003ac <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  4003ac:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4003ae:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  4003b0:	f013 0f04 	tst.w	r3, #4
  4003b4:	d005      	beq.n	4003c2 <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4003b6:	6809      	ldr	r1, [r1, #0]
  4003b8:	290f      	cmp	r1, #15
  4003ba:	d80a      	bhi.n	4003d2 <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4003bc:	4b05      	ldr	r3, [pc, #20]	; (4003d4 <spi_select_device+0x28>)
  4003be:	4798      	blx	r3
  4003c0:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4003c2:	680b      	ldr	r3, [r1, #0]
  4003c4:	2b03      	cmp	r3, #3
  4003c6:	d804      	bhi.n	4003d2 <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4003c8:	2101      	movs	r1, #1
  4003ca:	4099      	lsls	r1, r3
  4003cc:	43c9      	mvns	r1, r1
  4003ce:	4b01      	ldr	r3, [pc, #4]	; (4003d4 <spi_select_device+0x28>)
  4003d0:	4798      	blx	r3
  4003d2:	bd08      	pop	{r3, pc}
  4003d4:	00400c21 	.word	0x00400c21

004003d8 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  4003d8:	b510      	push	{r4, lr}
  4003da:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4003dc:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  4003de:	f413 7f00 	tst.w	r3, #512	; 0x200
  4003e2:	d0fb      	beq.n	4003dc <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  4003e4:	210f      	movs	r1, #15
  4003e6:	4620      	mov	r0, r4
  4003e8:	4b02      	ldr	r3, [pc, #8]	; (4003f4 <spi_deselect_device+0x1c>)
  4003ea:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4003ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4003f0:	6023      	str	r3, [r4, #0]
  4003f2:	bd10      	pop	{r4, pc}
  4003f4:	00400c21 	.word	0x00400c21

004003f8 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4003f8:	b4f0      	push	{r4, r5, r6, r7}
  4003fa:	b08c      	sub	sp, #48	; 0x30
  4003fc:	4607      	mov	r7, r0
  4003fe:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  400400:	ac01      	add	r4, sp, #4
  400402:	4d11      	ldr	r5, [pc, #68]	; (400448 <pwm_clocks_generate+0x50>)
  400404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40040a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40040c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  400414:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  400416:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400418:	f852 3b04 	ldr.w	r3, [r2], #4
  40041c:	fbb6 f3f3 	udiv	r3, r6, r3
  400420:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  400428:	d905      	bls.n	400436 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  40042a:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  40042c:	280b      	cmp	r0, #11
  40042e:	d1f3      	bne.n	400418 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  400430:	f64f 70ff 	movw	r0, #65535	; 0xffff
  400434:	e005      	b.n	400442 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  400436:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  400438:	bf94      	ite	ls
  40043a:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  40043e:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  400442:	b00c      	add	sp, #48	; 0x30
  400444:	bcf0      	pop	{r4, r5, r6, r7}
  400446:	4770      	bx	lr
  400448:	0040220c 	.word	0x0040220c

0040044c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  40044c:	b570      	push	{r4, r5, r6, lr}
  40044e:	4606      	mov	r6, r0
  400450:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  400452:	6808      	ldr	r0, [r1, #0]
  400454:	b140      	cbz	r0, 400468 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  400456:	6889      	ldr	r1, [r1, #8]
  400458:	4b0e      	ldr	r3, [pc, #56]	; (400494 <pwm_init+0x48>)
  40045a:	4798      	blx	r3
  40045c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  40045e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400462:	4298      	cmp	r0, r3
  400464:	d101      	bne.n	40046a <pwm_init+0x1e>
  400466:	e00e      	b.n	400486 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  400468:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40046a:	6860      	ldr	r0, [r4, #4]
  40046c:	b140      	cbz	r0, 400480 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  40046e:	68a1      	ldr	r1, [r4, #8]
  400470:	4b08      	ldr	r3, [pc, #32]	; (400494 <pwm_init+0x48>)
  400472:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  400474:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400478:	4298      	cmp	r0, r3
  40047a:	d007      	beq.n	40048c <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  40047c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  400480:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  400482:	2000      	movs	r0, #0
  400484:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  400486:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40048a:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  40048c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  400490:	bd70      	pop	{r4, r5, r6, pc}
  400492:	bf00      	nop
  400494:	004003f9 	.word	0x004003f9

00400498 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  400498:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  40049a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40049c:	684a      	ldr	r2, [r1, #4]
  40049e:	f002 020f 	and.w	r2, r2, #15
  4004a2:	8a8c      	ldrh	r4, [r1, #20]
  4004a4:	4322      	orrs	r2, r4
  4004a6:	890c      	ldrh	r4, [r1, #8]
  4004a8:	4322      	orrs	r2, r4
  4004aa:	7a8c      	ldrb	r4, [r1, #10]
  4004ac:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  4004b0:	7d8c      	ldrb	r4, [r1, #22]
  4004b2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4004b6:	7dcc      	ldrb	r4, [r1, #23]
  4004b8:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  4004bc:	7e0c      	ldrb	r4, [r1, #24]
  4004be:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  4004c2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  4004c6:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4004ca:	68ca      	ldr	r2, [r1, #12]
  4004cc:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4004d0:	690a      	ldr	r2, [r1, #16]
  4004d2:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4004d6:	7d8a      	ldrb	r2, [r1, #22]
  4004d8:	b13a      	cbz	r2, 4004ea <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4004da:	8b8c      	ldrh	r4, [r1, #28]
  4004dc:	8b4a      	ldrh	r2, [r1, #26]
  4004de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4004e2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4004e6:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4004ea:	6c84      	ldr	r4, [r0, #72]	; 0x48
  4004ec:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  4004f0:	409a      	lsls	r2, r3
  4004f2:	43d2      	mvns	r2, r2
  4004f4:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4004f8:	7fcc      	ldrb	r4, [r1, #31]
  4004fa:	fa04 f603 	lsl.w	r6, r4, r3
  4004fe:	7f8c      	ldrb	r4, [r1, #30]
  400500:	409c      	lsls	r4, r3
  400502:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  400506:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  400508:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  40050a:	6c44      	ldr	r4, [r0, #68]	; 0x44
  40050c:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40050e:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  400512:	fa04 f503 	lsl.w	r5, r4, r3
  400516:	f891 4020 	ldrb.w	r4, [r1, #32]
  40051a:	409c      	lsls	r4, r3
  40051c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400520:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  400522:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  400524:	2201      	movs	r2, #1
  400526:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  400528:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  40052c:	b11c      	cbz	r4, 400536 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  40052e:	6a04      	ldr	r4, [r0, #32]
  400530:	4314      	orrs	r4, r2
  400532:	6204      	str	r4, [r0, #32]
  400534:	e003      	b.n	40053e <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  400536:	6a04      	ldr	r4, [r0, #32]
  400538:	ea24 0402 	bic.w	r4, r4, r2
  40053c:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  40053e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  400542:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  400544:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400546:	bf0c      	ite	eq
  400548:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  40054a:	4394      	bicne	r4, r2
  40054c:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  40054e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  400552:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  400554:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400556:	bf0c      	ite	eq
  400558:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  40055c:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  400560:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  400562:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  400564:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  400566:	22ff      	movs	r2, #255	; 0xff
  400568:	409a      	lsls	r2, r3
  40056a:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  40056e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  400572:	fa01 f303 	lsl.w	r3, r1, r3
  400576:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  400578:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  40057a:	2000      	movs	r0, #0
  40057c:	bc70      	pop	{r4, r5, r6}
  40057e:	4770      	bx	lr

00400580 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  400580:	690b      	ldr	r3, [r1, #16]
  400582:	4293      	cmp	r3, r2
  400584:	d307      	bcc.n	400596 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  400586:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  400588:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  40058a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  40058e:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  400592:	2000      	movs	r0, #0
  400594:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  400596:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  40059a:	4770      	bx	lr

0040059c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  40059c:	2301      	movs	r3, #1
  40059e:	fa03 f101 	lsl.w	r1, r3, r1
  4005a2:	6041      	str	r1, [r0, #4]
  4005a4:	4770      	bx	lr
  4005a6:	bf00      	nop

004005a8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4005a8:	2301      	movs	r3, #1
  4005aa:	fa03 f101 	lsl.w	r1, r3, r1
  4005ae:	6081      	str	r1, [r0, #8]
  4005b0:	4770      	bx	lr
  4005b2:	bf00      	nop

004005b4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4005b4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4005b6:	480e      	ldr	r0, [pc, #56]	; (4005f0 <sysclk_init+0x3c>)
  4005b8:	4b0e      	ldr	r3, [pc, #56]	; (4005f4 <sysclk_init+0x40>)
  4005ba:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4005bc:	213e      	movs	r1, #62	; 0x3e
  4005be:	2000      	movs	r0, #0
  4005c0:	4b0d      	ldr	r3, [pc, #52]	; (4005f8 <sysclk_init+0x44>)
  4005c2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4005c4:	4c0d      	ldr	r4, [pc, #52]	; (4005fc <sysclk_init+0x48>)
  4005c6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4005c8:	2800      	cmp	r0, #0
  4005ca:	d0fc      	beq.n	4005c6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4005cc:	4b0c      	ldr	r3, [pc, #48]	; (400600 <sysclk_init+0x4c>)
  4005ce:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4005d0:	4a0c      	ldr	r2, [pc, #48]	; (400604 <sysclk_init+0x50>)
  4005d2:	4b0d      	ldr	r3, [pc, #52]	; (400608 <sysclk_init+0x54>)
  4005d4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4005d6:	4c0d      	ldr	r4, [pc, #52]	; (40060c <sysclk_init+0x58>)
  4005d8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4005da:	2800      	cmp	r0, #0
  4005dc:	d0fc      	beq.n	4005d8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4005de:	2010      	movs	r0, #16
  4005e0:	4b0b      	ldr	r3, [pc, #44]	; (400610 <sysclk_init+0x5c>)
  4005e2:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4005e4:	4b0b      	ldr	r3, [pc, #44]	; (400614 <sysclk_init+0x60>)
  4005e6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4005e8:	4801      	ldr	r0, [pc, #4]	; (4005f0 <sysclk_init+0x3c>)
  4005ea:	4b02      	ldr	r3, [pc, #8]	; (4005f4 <sysclk_init+0x40>)
  4005ec:	4798      	blx	r3
  4005ee:	bd10      	pop	{r4, pc}
  4005f0:	07270e00 	.word	0x07270e00
  4005f4:	00400f11 	.word	0x00400f11
  4005f8:	00400b39 	.word	0x00400b39
  4005fc:	00400b8d 	.word	0x00400b8d
  400600:	00400b9d 	.word	0x00400b9d
  400604:	20133f01 	.word	0x20133f01
  400608:	400e0400 	.word	0x400e0400
  40060c:	00400bad 	.word	0x00400bad
  400610:	00400ad1 	.word	0x00400ad1
  400614:	00400dfd 	.word	0x00400dfd

00400618 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40061a:	4830      	ldr	r0, [pc, #192]	; (4006dc <board_init+0xc4>)
  40061c:	4b30      	ldr	r3, [pc, #192]	; (4006e0 <board_init+0xc8>)
  40061e:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400620:	200b      	movs	r0, #11
  400622:	4c30      	ldr	r4, [pc, #192]	; (4006e4 <board_init+0xcc>)
  400624:	47a0      	blx	r4
  400626:	200c      	movs	r0, #12
  400628:	47a0      	blx	r4
  40062a:	200d      	movs	r0, #13
  40062c:	47a0      	blx	r4
  40062e:	4b2e      	ldr	r3, [pc, #184]	; (4006e8 <board_init+0xd0>)
  400630:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400634:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400636:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400638:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40063c:	4c2b      	ldr	r4, [pc, #172]	; (4006ec <board_init+0xd4>)
  40063e:	2504      	movs	r5, #4
  400640:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400642:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400646:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400648:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40064c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40064e:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400650:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400654:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400656:	f022 0204 	bic.w	r2, r2, #4
  40065a:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40065c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40065e:	f022 0204 	bic.w	r2, r2, #4
  400662:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400664:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400668:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40066a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40066c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400670:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400674:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400676:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400678:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40067c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400680:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400682:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400684:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400688:	4f19      	ldr	r7, [pc, #100]	; (4006f0 <board_init+0xd8>)
  40068a:	4639      	mov	r1, r7
  40068c:	200c      	movs	r0, #12
  40068e:	4e19      	ldr	r6, [pc, #100]	; (4006f4 <board_init+0xdc>)
  400690:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400692:	4639      	mov	r1, r7
  400694:	200d      	movs	r0, #13
  400696:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400698:	4639      	mov	r1, r7
  40069a:	200e      	movs	r0, #14
  40069c:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  40069e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4006a2:	2009      	movs	r0, #9
  4006a4:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  4006a6:	4914      	ldr	r1, [pc, #80]	; (4006f8 <board_init+0xe0>)
  4006a8:	200a      	movs	r0, #10
  4006aa:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  4006ac:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  4006b0:	4639      	mov	r1, r7
  4006b2:	2055      	movs	r0, #85	; 0x55
  4006b4:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  4006b6:	4639      	mov	r1, r7
  4006b8:	205f      	movs	r0, #95	; 0x5f
  4006ba:	47b0      	blx	r6
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4006bc:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4006be:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4006c2:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4006c4:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4006c6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4006ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4006cc:	f023 0304 	bic.w	r3, r3, #4
  4006d0:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4006d2:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4006d4:	f023 0304 	bic.w	r3, r3, #4
  4006d8:	6763      	str	r3, [r4, #116]	; 0x74
  4006da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006dc:	400e1450 	.word	0x400e1450
  4006e0:	00400d41 	.word	0x00400d41
  4006e4:	00400bbd 	.word	0x00400bbd
  4006e8:	400e1200 	.word	0x400e1200
  4006ec:	400e0e00 	.word	0x400e0e00
  4006f0:	08000001 	.word	0x08000001
  4006f4:	00400849 	.word	0x00400849
  4006f8:	10000001 	.word	0x10000001

004006fc <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4006fc:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400700:	0052      	lsls	r2, r2, #1
  400702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400706:	fbb3 f2f2 	udiv	r2, r3, r2
  40070a:	3a01      	subs	r2, #1
  40070c:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400710:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400714:	4770      	bx	lr
  400716:	bf00      	nop

00400718 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400718:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40071a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40071e:	d02f      	beq.n	400780 <pio_set_peripheral+0x68>
  400720:	d807      	bhi.n	400732 <pio_set_peripheral+0x1a>
  400722:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400726:	d014      	beq.n	400752 <pio_set_peripheral+0x3a>
  400728:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40072c:	d01e      	beq.n	40076c <pio_set_peripheral+0x54>
  40072e:	b939      	cbnz	r1, 400740 <pio_set_peripheral+0x28>
  400730:	4770      	bx	lr
  400732:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400736:	d036      	beq.n	4007a6 <pio_set_peripheral+0x8e>
  400738:	d804      	bhi.n	400744 <pio_set_peripheral+0x2c>
  40073a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40073e:	d029      	beq.n	400794 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400740:	6042      	str	r2, [r0, #4]
  400742:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400744:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400748:	d02d      	beq.n	4007a6 <pio_set_peripheral+0x8e>
  40074a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40074e:	d02a      	beq.n	4007a6 <pio_set_peripheral+0x8e>
  400750:	e7f6      	b.n	400740 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400752:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400754:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400756:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400758:	43d3      	mvns	r3, r2
  40075a:	4021      	ands	r1, r4
  40075c:	4019      	ands	r1, r3
  40075e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400760:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400762:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400764:	4021      	ands	r1, r4
  400766:	400b      	ands	r3, r1
  400768:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40076a:	e01a      	b.n	4007a2 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40076c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40076e:	4313      	orrs	r3, r2
  400770:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400772:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400774:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400776:	400b      	ands	r3, r1
  400778:	ea23 0302 	bic.w	r3, r3, r2
  40077c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40077e:	e7df      	b.n	400740 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400780:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400782:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400784:	400b      	ands	r3, r1
  400786:	ea23 0302 	bic.w	r3, r3, r2
  40078a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40078c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40078e:	4313      	orrs	r3, r2
  400790:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400792:	e7d5      	b.n	400740 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400794:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400796:	4313      	orrs	r3, r2
  400798:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40079a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40079c:	4313      	orrs	r3, r2
  40079e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4007a0:	e7ce      	b.n	400740 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4007a2:	6042      	str	r2, [r0, #4]
}
  4007a4:	bc10      	pop	{r4}
  4007a6:	4770      	bx	lr

004007a8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4007a8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4007aa:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4007ae:	bf14      	ite	ne
  4007b0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007b2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4007b4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4007b8:	bf14      	ite	ne
  4007ba:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4007bc:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4007be:	f012 0f02 	tst.w	r2, #2
  4007c2:	d002      	beq.n	4007ca <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  4007c4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4007c8:	e004      	b.n	4007d4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4007ca:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4007ce:	bf18      	it	ne
  4007d0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4007d4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4007d6:	6001      	str	r1, [r0, #0]
  4007d8:	4770      	bx	lr
  4007da:	bf00      	nop

004007dc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4007dc:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4007de:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4007e0:	9c01      	ldr	r4, [sp, #4]
  4007e2:	b10c      	cbz	r4, 4007e8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4007e4:	6641      	str	r1, [r0, #100]	; 0x64
  4007e6:	e000      	b.n	4007ea <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007e8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4007ea:	b10b      	cbz	r3, 4007f0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4007ec:	6501      	str	r1, [r0, #80]	; 0x50
  4007ee:	e000      	b.n	4007f2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4007f0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4007f2:	b10a      	cbz	r2, 4007f8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4007f4:	6301      	str	r1, [r0, #48]	; 0x30
  4007f6:	e000      	b.n	4007fa <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4007f8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4007fa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4007fc:	6001      	str	r1, [r0, #0]
}
  4007fe:	bc10      	pop	{r4}
  400800:	4770      	bx	lr
  400802:	bf00      	nop

00400804 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400804:	f012 0f10 	tst.w	r2, #16
  400808:	d010      	beq.n	40082c <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40080a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40080e:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400812:	bf14      	ite	ne
  400814:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400818:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40081c:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400820:	bf14      	ite	ne
  400822:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400826:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  40082a:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  40082c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400830:	4770      	bx	lr
  400832:	bf00      	nop

00400834 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  400834:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  400836:	6401      	str	r1, [r0, #64]	; 0x40
  400838:	4770      	bx	lr
  40083a:	bf00      	nop

0040083c <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40083c:	6441      	str	r1, [r0, #68]	; 0x44
  40083e:	4770      	bx	lr

00400840 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400840:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400842:	4770      	bx	lr

00400844 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400844:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400846:	4770      	bx	lr

00400848 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400848:	b570      	push	{r4, r5, r6, lr}
  40084a:	b082      	sub	sp, #8
  40084c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40084e:	0943      	lsrs	r3, r0, #5
  400850:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400854:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400858:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40085a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40085e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400862:	d047      	beq.n	4008f4 <pio_configure_pin+0xac>
  400864:	d809      	bhi.n	40087a <pio_configure_pin+0x32>
  400866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40086a:	d021      	beq.n	4008b0 <pio_configure_pin+0x68>
  40086c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400870:	d02f      	beq.n	4008d2 <pio_configure_pin+0x8a>
  400872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400876:	d16f      	bne.n	400958 <pio_configure_pin+0x110>
  400878:	e009      	b.n	40088e <pio_configure_pin+0x46>
  40087a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40087e:	d055      	beq.n	40092c <pio_configure_pin+0xe4>
  400880:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400884:	d052      	beq.n	40092c <pio_configure_pin+0xe4>
  400886:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40088a:	d044      	beq.n	400916 <pio_configure_pin+0xce>
  40088c:	e064      	b.n	400958 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40088e:	f000 001f 	and.w	r0, r0, #31
  400892:	2601      	movs	r6, #1
  400894:	4086      	lsls	r6, r0
  400896:	4632      	mov	r2, r6
  400898:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40089c:	4620      	mov	r0, r4
  40089e:	4b30      	ldr	r3, [pc, #192]	; (400960 <pio_configure_pin+0x118>)
  4008a0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4008a2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4008a6:	bf14      	ite	ne
  4008a8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4008aa:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4008ac:	2001      	movs	r0, #1
  4008ae:	e054      	b.n	40095a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4008b0:	f000 001f 	and.w	r0, r0, #31
  4008b4:	2601      	movs	r6, #1
  4008b6:	4086      	lsls	r6, r0
  4008b8:	4632      	mov	r2, r6
  4008ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008be:	4620      	mov	r0, r4
  4008c0:	4b27      	ldr	r3, [pc, #156]	; (400960 <pio_configure_pin+0x118>)
  4008c2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4008c4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4008c8:	bf14      	ite	ne
  4008ca:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4008cc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4008ce:	2001      	movs	r0, #1
  4008d0:	e043      	b.n	40095a <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4008d2:	f000 001f 	and.w	r0, r0, #31
  4008d6:	2601      	movs	r6, #1
  4008d8:	4086      	lsls	r6, r0
  4008da:	4632      	mov	r2, r6
  4008dc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4008e0:	4620      	mov	r0, r4
  4008e2:	4b1f      	ldr	r3, [pc, #124]	; (400960 <pio_configure_pin+0x118>)
  4008e4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4008e6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4008ea:	bf14      	ite	ne
  4008ec:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4008ee:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4008f0:	2001      	movs	r0, #1
  4008f2:	e032      	b.n	40095a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4008f4:	f000 001f 	and.w	r0, r0, #31
  4008f8:	2601      	movs	r6, #1
  4008fa:	4086      	lsls	r6, r0
  4008fc:	4632      	mov	r2, r6
  4008fe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400902:	4620      	mov	r0, r4
  400904:	4b16      	ldr	r3, [pc, #88]	; (400960 <pio_configure_pin+0x118>)
  400906:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400908:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40090c:	bf14      	ite	ne
  40090e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400910:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400912:	2001      	movs	r0, #1
  400914:	e021      	b.n	40095a <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400916:	f000 011f 	and.w	r1, r0, #31
  40091a:	2601      	movs	r6, #1
  40091c:	462a      	mov	r2, r5
  40091e:	fa06 f101 	lsl.w	r1, r6, r1
  400922:	4620      	mov	r0, r4
  400924:	4b0f      	ldr	r3, [pc, #60]	; (400964 <pio_configure_pin+0x11c>)
  400926:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400928:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40092a:	e016      	b.n	40095a <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40092c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  400930:	f000 011f 	and.w	r1, r0, #31
  400934:	2601      	movs	r6, #1
  400936:	ea05 0306 	and.w	r3, r5, r6
  40093a:	9300      	str	r3, [sp, #0]
  40093c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400940:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400944:	bf14      	ite	ne
  400946:	2200      	movne	r2, #0
  400948:	2201      	moveq	r2, #1
  40094a:	fa06 f101 	lsl.w	r1, r6, r1
  40094e:	4620      	mov	r0, r4
  400950:	4c05      	ldr	r4, [pc, #20]	; (400968 <pio_configure_pin+0x120>)
  400952:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400954:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400956:	e000      	b.n	40095a <pio_configure_pin+0x112>

	default:
		return 0;
  400958:	2000      	movs	r0, #0
	}

	return 1;
}
  40095a:	b002      	add	sp, #8
  40095c:	bd70      	pop	{r4, r5, r6, pc}
  40095e:	bf00      	nop
  400960:	00400719 	.word	0x00400719
  400964:	004007a9 	.word	0x004007a9
  400968:	004007dd 	.word	0x004007dd

0040096c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40096c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400970:	4681      	mov	r9, r0
  400972:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400974:	4b12      	ldr	r3, [pc, #72]	; (4009c0 <pio_handler_process+0x54>)
  400976:	4798      	blx	r3
  400978:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40097a:	4648      	mov	r0, r9
  40097c:	4b11      	ldr	r3, [pc, #68]	; (4009c4 <pio_handler_process+0x58>)
  40097e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400980:	4005      	ands	r5, r0
  400982:	d013      	beq.n	4009ac <pio_handler_process+0x40>
  400984:	4c10      	ldr	r4, [pc, #64]	; (4009c8 <pio_handler_process+0x5c>)
  400986:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40098a:	6823      	ldr	r3, [r4, #0]
  40098c:	4543      	cmp	r3, r8
  40098e:	d108      	bne.n	4009a2 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400990:	6861      	ldr	r1, [r4, #4]
  400992:	4229      	tst	r1, r5
  400994:	d005      	beq.n	4009a2 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400996:	68e3      	ldr	r3, [r4, #12]
  400998:	4640      	mov	r0, r8
  40099a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40099c:	6863      	ldr	r3, [r4, #4]
  40099e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4009a2:	42b4      	cmp	r4, r6
  4009a4:	d002      	beq.n	4009ac <pio_handler_process+0x40>
  4009a6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4009a8:	2d00      	cmp	r5, #0
  4009aa:	d1ee      	bne.n	40098a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4009ac:	4b07      	ldr	r3, [pc, #28]	; (4009cc <pio_handler_process+0x60>)
  4009ae:	681b      	ldr	r3, [r3, #0]
  4009b0:	b123      	cbz	r3, 4009bc <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4009b2:	4b07      	ldr	r3, [pc, #28]	; (4009d0 <pio_handler_process+0x64>)
  4009b4:	681b      	ldr	r3, [r3, #0]
  4009b6:	b10b      	cbz	r3, 4009bc <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4009b8:	4648      	mov	r0, r9
  4009ba:	4798      	blx	r3
  4009bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009c0:	00400841 	.word	0x00400841
  4009c4:	00400845 	.word	0x00400845
  4009c8:	2000085c 	.word	0x2000085c
  4009cc:	200008cc 	.word	0x200008cc
  4009d0:	20000858 	.word	0x20000858

004009d4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4009d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4009d6:	4c0c      	ldr	r4, [pc, #48]	; (400a08 <pio_handler_set+0x34>)
  4009d8:	6824      	ldr	r4, [r4, #0]
  4009da:	2c06      	cmp	r4, #6
  4009dc:	d811      	bhi.n	400a02 <pio_handler_set+0x2e>
  4009de:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  4009e0:	4f0a      	ldr	r7, [pc, #40]	; (400a0c <pio_handler_set+0x38>)
  4009e2:	0126      	lsls	r6, r4, #4
  4009e4:	19ba      	adds	r2, r7, r6
  4009e6:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
  4009e8:	6055      	str	r5, [r2, #4]
	pSource->attr = ul_attr;
  4009ea:	6093      	str	r3, [r2, #8]
	pSource->handler = p_handler;
  4009ec:	9906      	ldr	r1, [sp, #24]
  4009ee:	60d1      	str	r1, [r2, #12]
	gs_ul_nb_sources++;
  4009f0:	3401      	adds	r4, #1
  4009f2:	4a05      	ldr	r2, [pc, #20]	; (400a08 <pio_handler_set+0x34>)
  4009f4:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4009f6:	461a      	mov	r2, r3
  4009f8:	4629      	mov	r1, r5
  4009fa:	4b05      	ldr	r3, [pc, #20]	; (400a10 <pio_handler_set+0x3c>)
  4009fc:	4798      	blx	r3

	return 0;
  4009fe:	2000      	movs	r0, #0
  400a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  400a02:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  400a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a06:	bf00      	nop
  400a08:	20000854 	.word	0x20000854
  400a0c:	2000085c 	.word	0x2000085c
  400a10:	00400805 	.word	0x00400805

00400a14 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400a14:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400a16:	210b      	movs	r1, #11
  400a18:	4801      	ldr	r0, [pc, #4]	; (400a20 <PIOA_Handler+0xc>)
  400a1a:	4b02      	ldr	r3, [pc, #8]	; (400a24 <PIOA_Handler+0x10>)
  400a1c:	4798      	blx	r3
  400a1e:	bd08      	pop	{r3, pc}
  400a20:	400e0e00 	.word	0x400e0e00
  400a24:	0040096d 	.word	0x0040096d

00400a28 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400a28:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400a2a:	210c      	movs	r1, #12
  400a2c:	4801      	ldr	r0, [pc, #4]	; (400a34 <PIOB_Handler+0xc>)
  400a2e:	4b02      	ldr	r3, [pc, #8]	; (400a38 <PIOB_Handler+0x10>)
  400a30:	4798      	blx	r3
  400a32:	bd08      	pop	{r3, pc}
  400a34:	400e1000 	.word	0x400e1000
  400a38:	0040096d 	.word	0x0040096d

00400a3c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400a3c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400a3e:	210d      	movs	r1, #13
  400a40:	4801      	ldr	r0, [pc, #4]	; (400a48 <PIOC_Handler+0xc>)
  400a42:	4b02      	ldr	r3, [pc, #8]	; (400a4c <PIOC_Handler+0x10>)
  400a44:	4798      	blx	r3
  400a46:	bd08      	pop	{r3, pc}
  400a48:	400e1200 	.word	0x400e1200
  400a4c:	0040096d 	.word	0x0040096d

00400a50 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  400a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a52:	4605      	mov	r5, r0
  400a54:	460c      	mov	r4, r1
  400a56:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  400a58:	4b18      	ldr	r3, [pc, #96]	; (400abc <pio_handler_set_priority+0x6c>)
  400a5a:	4798      	blx	r3
  400a5c:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400a5e:	f04f 31ff 	mov.w	r1, #4294967295
  400a62:	4628      	mov	r0, r5
  400a64:	4b16      	ldr	r3, [pc, #88]	; (400ac0 <pio_handler_set_priority+0x70>)
  400a66:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400a68:	4628      	mov	r0, r5
  400a6a:	4b16      	ldr	r3, [pc, #88]	; (400ac4 <pio_handler_set_priority+0x74>)
  400a6c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400a6e:	b2e2      	uxtb	r2, r4
  400a70:	f002 031f 	and.w	r3, r2, #31
  400a74:	2101      	movs	r1, #1
  400a76:	4099      	lsls	r1, r3
  400a78:	0963      	lsrs	r3, r4, #5
  400a7a:	009b      	lsls	r3, r3, #2
  400a7c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  400a80:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  400a84:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400a88:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400a8c:	2c00      	cmp	r4, #0
  400a8e:	da06      	bge.n	400a9e <pio_handler_set_priority+0x4e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400a90:	f002 020f 	and.w	r2, r2, #15
  400a94:	013f      	lsls	r7, r7, #4
  400a96:	b2ff      	uxtb	r7, r7
  400a98:	480b      	ldr	r0, [pc, #44]	; (400ac8 <pio_handler_set_priority+0x78>)
  400a9a:	5487      	strb	r7, [r0, r2]
  400a9c:	e007      	b.n	400aae <pio_handler_set_priority+0x5e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400a9e:	013f      	lsls	r7, r7, #4
  400aa0:	b2ff      	uxtb	r7, r7
  400aa2:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  400aa6:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  400aaa:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400aae:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  400ab0:	4631      	mov	r1, r6
  400ab2:	4628      	mov	r0, r5
  400ab4:	4b05      	ldr	r3, [pc, #20]	; (400acc <pio_handler_set_priority+0x7c>)
  400ab6:	4798      	blx	r3
  400ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400aba:	bf00      	nop
  400abc:	00400845 	.word	0x00400845
  400ac0:	0040083d 	.word	0x0040083d
  400ac4:	00400841 	.word	0x00400841
  400ac8:	e000ed14 	.word	0xe000ed14
  400acc:	00400835 	.word	0x00400835

00400ad0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ad0:	4a18      	ldr	r2, [pc, #96]	; (400b34 <pmc_switch_mck_to_pllack+0x64>)
  400ad2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400ad8:	4318      	orrs	r0, r3
  400ada:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400adc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ade:	f013 0f08 	tst.w	r3, #8
  400ae2:	d003      	beq.n	400aec <pmc_switch_mck_to_pllack+0x1c>
  400ae4:	e009      	b.n	400afa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ae6:	3b01      	subs	r3, #1
  400ae8:	d103      	bne.n	400af2 <pmc_switch_mck_to_pllack+0x22>
  400aea:	e01e      	b.n	400b2a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400aec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400af0:	4910      	ldr	r1, [pc, #64]	; (400b34 <pmc_switch_mck_to_pllack+0x64>)
  400af2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400af4:	f012 0f08 	tst.w	r2, #8
  400af8:	d0f5      	beq.n	400ae6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400afa:	4a0e      	ldr	r2, [pc, #56]	; (400b34 <pmc_switch_mck_to_pllack+0x64>)
  400afc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400afe:	f023 0303 	bic.w	r3, r3, #3
  400b02:	f043 0302 	orr.w	r3, r3, #2
  400b06:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b08:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400b0a:	f010 0008 	ands.w	r0, r0, #8
  400b0e:	d004      	beq.n	400b1a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400b10:	2000      	movs	r0, #0
  400b12:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b14:	3b01      	subs	r3, #1
  400b16:	d103      	bne.n	400b20 <pmc_switch_mck_to_pllack+0x50>
  400b18:	e009      	b.n	400b2e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b1e:	4905      	ldr	r1, [pc, #20]	; (400b34 <pmc_switch_mck_to_pllack+0x64>)
  400b20:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b22:	f012 0f08 	tst.w	r2, #8
  400b26:	d0f5      	beq.n	400b14 <pmc_switch_mck_to_pllack+0x44>
  400b28:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400b2a:	2001      	movs	r0, #1
  400b2c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400b2e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400b30:	4770      	bx	lr
  400b32:	bf00      	nop
  400b34:	400e0400 	.word	0x400e0400

00400b38 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400b38:	b138      	cbz	r0, 400b4a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b3a:	4911      	ldr	r1, [pc, #68]	; (400b80 <pmc_switch_mainck_to_xtal+0x48>)
  400b3c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400b3e:	4a11      	ldr	r2, [pc, #68]	; (400b84 <pmc_switch_mainck_to_xtal+0x4c>)
  400b40:	401a      	ands	r2, r3
  400b42:	4b11      	ldr	r3, [pc, #68]	; (400b88 <pmc_switch_mainck_to_xtal+0x50>)
  400b44:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b46:	620b      	str	r3, [r1, #32]
  400b48:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b4a:	480d      	ldr	r0, [pc, #52]	; (400b80 <pmc_switch_mainck_to_xtal+0x48>)
  400b4c:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b4e:	0209      	lsls	r1, r1, #8
  400b50:	b289      	uxth	r1, r1
  400b52:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  400b56:	f023 0303 	bic.w	r3, r3, #3
  400b5a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400b5e:	f043 0301 	orr.w	r3, r3, #1
  400b62:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b64:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400b66:	4602      	mov	r2, r0
  400b68:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b6a:	f013 0f01 	tst.w	r3, #1
  400b6e:	d0fb      	beq.n	400b68 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400b70:	4a03      	ldr	r2, [pc, #12]	; (400b80 <pmc_switch_mainck_to_xtal+0x48>)
  400b72:	6a13      	ldr	r3, [r2, #32]
  400b74:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400b7c:	6213      	str	r3, [r2, #32]
  400b7e:	4770      	bx	lr
  400b80:	400e0400 	.word	0x400e0400
  400b84:	fec8fffc 	.word	0xfec8fffc
  400b88:	01370002 	.word	0x01370002

00400b8c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400b8c:	4b02      	ldr	r3, [pc, #8]	; (400b98 <pmc_osc_is_ready_mainck+0xc>)
  400b8e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b90:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400b94:	4770      	bx	lr
  400b96:	bf00      	nop
  400b98:	400e0400 	.word	0x400e0400

00400b9c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ba0:	4b01      	ldr	r3, [pc, #4]	; (400ba8 <pmc_disable_pllack+0xc>)
  400ba2:	629a      	str	r2, [r3, #40]	; 0x28
  400ba4:	4770      	bx	lr
  400ba6:	bf00      	nop
  400ba8:	400e0400 	.word	0x400e0400

00400bac <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400bac:	4b02      	ldr	r3, [pc, #8]	; (400bb8 <pmc_is_locked_pllack+0xc>)
  400bae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400bb0:	f000 0002 	and.w	r0, r0, #2
  400bb4:	4770      	bx	lr
  400bb6:	bf00      	nop
  400bb8:	400e0400 	.word	0x400e0400

00400bbc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400bbc:	2822      	cmp	r0, #34	; 0x22
  400bbe:	d81e      	bhi.n	400bfe <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400bc0:	281f      	cmp	r0, #31
  400bc2:	d80c      	bhi.n	400bde <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400bc4:	4b11      	ldr	r3, [pc, #68]	; (400c0c <pmc_enable_periph_clk+0x50>)
  400bc6:	699a      	ldr	r2, [r3, #24]
  400bc8:	2301      	movs	r3, #1
  400bca:	4083      	lsls	r3, r0
  400bcc:	4393      	bics	r3, r2
  400bce:	d018      	beq.n	400c02 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400bd0:	2301      	movs	r3, #1
  400bd2:	fa03 f000 	lsl.w	r0, r3, r0
  400bd6:	4b0d      	ldr	r3, [pc, #52]	; (400c0c <pmc_enable_periph_clk+0x50>)
  400bd8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400bda:	2000      	movs	r0, #0
  400bdc:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400bde:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400be0:	4b0a      	ldr	r3, [pc, #40]	; (400c0c <pmc_enable_periph_clk+0x50>)
  400be2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400be6:	2301      	movs	r3, #1
  400be8:	4083      	lsls	r3, r0
  400bea:	4393      	bics	r3, r2
  400bec:	d00b      	beq.n	400c06 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400bee:	2301      	movs	r3, #1
  400bf0:	fa03 f000 	lsl.w	r0, r3, r0
  400bf4:	4b05      	ldr	r3, [pc, #20]	; (400c0c <pmc_enable_periph_clk+0x50>)
  400bf6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400bfa:	2000      	movs	r0, #0
  400bfc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400bfe:	2001      	movs	r0, #1
  400c00:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c02:	2000      	movs	r0, #0
  400c04:	4770      	bx	lr
  400c06:	2000      	movs	r0, #0
}
  400c08:	4770      	bx	lr
  400c0a:	bf00      	nop
  400c0c:	400e0400 	.word	0x400e0400

00400c10 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400c10:	b508      	push	{r3, lr}
  400c12:	2015      	movs	r0, #21
  400c14:	4b01      	ldr	r3, [pc, #4]	; (400c1c <spi_enable_clock+0xc>)
  400c16:	4798      	blx	r3
  400c18:	bd08      	pop	{r3, pc}
  400c1a:	bf00      	nop
  400c1c:	00400bbd 	.word	0x00400bbd

00400c20 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400c20:	6843      	ldr	r3, [r0, #4]
  400c22:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400c26:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400c28:	6843      	ldr	r3, [r0, #4]
  400c2a:	0409      	lsls	r1, r1, #16
  400c2c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400c30:	430b      	orrs	r3, r1
  400c32:	6043      	str	r3, [r0, #4]
  400c34:	4770      	bx	lr
  400c36:	bf00      	nop

00400c38 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  400c38:	6843      	ldr	r3, [r0, #4]
  400c3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400c3e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  400c40:	6843      	ldr	r3, [r0, #4]
  400c42:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  400c46:	6041      	str	r1, [r0, #4]
  400c48:	4770      	bx	lr
  400c4a:	bf00      	nop

00400c4c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400c4c:	b132      	cbz	r2, 400c5c <spi_set_clock_polarity+0x10>
  400c4e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400c52:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c54:	f043 0301 	orr.w	r3, r3, #1
  400c58:	6303      	str	r3, [r0, #48]	; 0x30
  400c5a:	4770      	bx	lr
  400c5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400c60:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c62:	f023 0301 	bic.w	r3, r3, #1
  400c66:	6303      	str	r3, [r0, #48]	; 0x30
  400c68:	4770      	bx	lr
  400c6a:	bf00      	nop

00400c6c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400c6c:	b132      	cbz	r2, 400c7c <spi_set_clock_phase+0x10>
  400c6e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400c72:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c74:	f043 0302 	orr.w	r3, r3, #2
  400c78:	6303      	str	r3, [r0, #48]	; 0x30
  400c7a:	4770      	bx	lr
  400c7c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400c80:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c82:	f023 0302 	bic.w	r3, r3, #2
  400c86:	6303      	str	r3, [r0, #48]	; 0x30
  400c88:	4770      	bx	lr
  400c8a:	bf00      	nop

00400c8c <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400c8c:	2a04      	cmp	r2, #4
  400c8e:	d10a      	bne.n	400ca6 <spi_configure_cs_behavior+0x1a>
  400c90:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400c94:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c96:	f023 0308 	bic.w	r3, r3, #8
  400c9a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400c9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c9e:	f043 0304 	orr.w	r3, r3, #4
  400ca2:	6303      	str	r3, [r0, #48]	; 0x30
  400ca4:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400ca6:	b952      	cbnz	r2, 400cbe <spi_configure_cs_behavior+0x32>
  400ca8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400cac:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400cae:	f023 0308 	bic.w	r3, r3, #8
  400cb2:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400cb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400cb6:	f023 0304 	bic.w	r3, r3, #4
  400cba:	6303      	str	r3, [r0, #48]	; 0x30
  400cbc:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400cbe:	2a08      	cmp	r2, #8
  400cc0:	d105      	bne.n	400cce <spi_configure_cs_behavior+0x42>
  400cc2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400cc6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400cc8:	f043 0308 	orr.w	r3, r3, #8
  400ccc:	6303      	str	r3, [r0, #48]	; 0x30
  400cce:	4770      	bx	lr

00400cd0 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400cd0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400cd4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400cda:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400cdc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400cde:	431a      	orrs	r2, r3
  400ce0:	630a      	str	r2, [r1, #48]	; 0x30
  400ce2:	4770      	bx	lr

00400ce4 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400ce4:	1e43      	subs	r3, r0, #1
  400ce6:	4419      	add	r1, r3
  400ce8:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400cec:	1e43      	subs	r3, r0, #1
  400cee:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400cf0:	bf94      	ite	ls
  400cf2:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  400cf4:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  400cf8:	4770      	bx	lr
  400cfa:	bf00      	nop

00400cfc <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400cfc:	b16a      	cbz	r2, 400d1a <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400cfe:	b410      	push	{r4}
  400d00:	4614      	mov	r4, r2
  400d02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400d06:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400d08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400d0c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400d0e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  400d10:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400d14:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400d16:	2000      	movs	r0, #0
  400d18:	e002      	b.n	400d20 <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  400d1a:	f04f 30ff 	mov.w	r0, #4294967295
  400d1e:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  400d20:	bc10      	pop	{r4}
  400d22:	4770      	bx	lr

00400d24 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  400d24:	b410      	push	{r4}
  400d26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  400d2a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  400d2c:	b280      	uxth	r0, r0
  400d2e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400d30:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  400d32:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  400d36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  400d3a:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  400d3c:	bc10      	pop	{r4}
  400d3e:	4770      	bx	lr

00400d40 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d44:	6043      	str	r3, [r0, #4]
  400d46:	4770      	bx	lr

00400d48 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400d48:	e7fe      	b.n	400d48 <Dummy_Handler>
  400d4a:	bf00      	nop

00400d4c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400d4c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400d4e:	4b20      	ldr	r3, [pc, #128]	; (400dd0 <Reset_Handler+0x84>)
  400d50:	4a20      	ldr	r2, [pc, #128]	; (400dd4 <Reset_Handler+0x88>)
  400d52:	429a      	cmp	r2, r3
  400d54:	d912      	bls.n	400d7c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400d56:	4b20      	ldr	r3, [pc, #128]	; (400dd8 <Reset_Handler+0x8c>)
  400d58:	4a1d      	ldr	r2, [pc, #116]	; (400dd0 <Reset_Handler+0x84>)
  400d5a:	429a      	cmp	r2, r3
  400d5c:	d21e      	bcs.n	400d9c <Reset_Handler+0x50>
  400d5e:	4611      	mov	r1, r2
  400d60:	3b01      	subs	r3, #1
  400d62:	1a9b      	subs	r3, r3, r2
  400d64:	f023 0303 	bic.w	r3, r3, #3
  400d68:	3304      	adds	r3, #4
  400d6a:	4a1a      	ldr	r2, [pc, #104]	; (400dd4 <Reset_Handler+0x88>)
  400d6c:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400d6e:	f852 0b04 	ldr.w	r0, [r2], #4
  400d72:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400d76:	429a      	cmp	r2, r3
  400d78:	d1f9      	bne.n	400d6e <Reset_Handler+0x22>
  400d7a:	e00f      	b.n	400d9c <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400d7c:	4b14      	ldr	r3, [pc, #80]	; (400dd0 <Reset_Handler+0x84>)
  400d7e:	4a15      	ldr	r2, [pc, #84]	; (400dd4 <Reset_Handler+0x88>)
  400d80:	429a      	cmp	r2, r3
  400d82:	d20b      	bcs.n	400d9c <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400d84:	4b14      	ldr	r3, [pc, #80]	; (400dd8 <Reset_Handler+0x8c>)
  400d86:	4a12      	ldr	r2, [pc, #72]	; (400dd0 <Reset_Handler+0x84>)
  400d88:	1a9a      	subs	r2, r3, r2
  400d8a:	4814      	ldr	r0, [pc, #80]	; (400ddc <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400d8c:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400d8e:	b12a      	cbz	r2, 400d9c <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  400d90:	f851 2904 	ldr.w	r2, [r1], #-4
  400d94:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400d98:	4281      	cmp	r1, r0
  400d9a:	d1f9      	bne.n	400d90 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400d9c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400d9e:	4b10      	ldr	r3, [pc, #64]	; (400de0 <Reset_Handler+0x94>)
  400da0:	4a10      	ldr	r2, [pc, #64]	; (400de4 <Reset_Handler+0x98>)
  400da2:	429a      	cmp	r2, r3
  400da4:	d20b      	bcs.n	400dbe <Reset_Handler+0x72>
  400da6:	1d13      	adds	r3, r2, #4
  400da8:	4a0f      	ldr	r2, [pc, #60]	; (400de8 <Reset_Handler+0x9c>)
  400daa:	1ad2      	subs	r2, r2, r3
  400dac:	f022 0203 	bic.w	r2, r2, #3
  400db0:	441a      	add	r2, r3
  400db2:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400db4:	2100      	movs	r1, #0
  400db6:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400dba:	429a      	cmp	r2, r3
  400dbc:	d1fb      	bne.n	400db6 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400dbe:	4b0b      	ldr	r3, [pc, #44]	; (400dec <Reset_Handler+0xa0>)
  400dc0:	4a0b      	ldr	r2, [pc, #44]	; (400df0 <Reset_Handler+0xa4>)
  400dc2:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400dc4:	4b0b      	ldr	r3, [pc, #44]	; (400df4 <Reset_Handler+0xa8>)
  400dc6:	4798      	blx	r3

	/* Branch to main function */
	main();
  400dc8:	4b0b      	ldr	r3, [pc, #44]	; (400df8 <Reset_Handler+0xac>)
  400dca:	4798      	blx	r3
  400dcc:	e7fe      	b.n	400dcc <Reset_Handler+0x80>
  400dce:	bf00      	nop
  400dd0:	20000000 	.word	0x20000000
  400dd4:	00402304 	.word	0x00402304
  400dd8:	20000838 	.word	0x20000838
  400ddc:	00402300 	.word	0x00402300
  400de0:	200008d0 	.word	0x200008d0
  400de4:	20000838 	.word	0x20000838
  400de8:	200008d3 	.word	0x200008d3
  400dec:	e000ed00 	.word	0xe000ed00
  400df0:	00400000 	.word	0x00400000
  400df4:	00401f81 	.word	0x00401f81
  400df8:	00401771 	.word	0x00401771

00400dfc <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400dfc:	4b3d      	ldr	r3, [pc, #244]	; (400ef4 <SystemCoreClockUpdate+0xf8>)
  400dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e00:	f003 0303 	and.w	r3, r3, #3
  400e04:	2b03      	cmp	r3, #3
  400e06:	d85d      	bhi.n	400ec4 <SystemCoreClockUpdate+0xc8>
  400e08:	e8df f003 	tbb	[pc, r3]
  400e0c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400e10:	4b39      	ldr	r3, [pc, #228]	; (400ef8 <SystemCoreClockUpdate+0xfc>)
  400e12:	695b      	ldr	r3, [r3, #20]
  400e14:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400e18:	bf14      	ite	ne
  400e1a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400e1e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400e22:	4b36      	ldr	r3, [pc, #216]	; (400efc <SystemCoreClockUpdate+0x100>)
  400e24:	601a      	str	r2, [r3, #0]
  400e26:	e04d      	b.n	400ec4 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e28:	4b32      	ldr	r3, [pc, #200]	; (400ef4 <SystemCoreClockUpdate+0xf8>)
  400e2a:	6a1b      	ldr	r3, [r3, #32]
  400e2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e30:	d003      	beq.n	400e3a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400e32:	4a33      	ldr	r2, [pc, #204]	; (400f00 <SystemCoreClockUpdate+0x104>)
  400e34:	4b31      	ldr	r3, [pc, #196]	; (400efc <SystemCoreClockUpdate+0x100>)
  400e36:	601a      	str	r2, [r3, #0]
  400e38:	e044      	b.n	400ec4 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e3a:	4a32      	ldr	r2, [pc, #200]	; (400f04 <SystemCoreClockUpdate+0x108>)
  400e3c:	4b2f      	ldr	r3, [pc, #188]	; (400efc <SystemCoreClockUpdate+0x100>)
  400e3e:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e40:	4b2c      	ldr	r3, [pc, #176]	; (400ef4 <SystemCoreClockUpdate+0xf8>)
  400e42:	6a1b      	ldr	r3, [r3, #32]
  400e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e48:	2b10      	cmp	r3, #16
  400e4a:	d002      	beq.n	400e52 <SystemCoreClockUpdate+0x56>
  400e4c:	2b20      	cmp	r3, #32
  400e4e:	d004      	beq.n	400e5a <SystemCoreClockUpdate+0x5e>
  400e50:	e038      	b.n	400ec4 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e52:	4a2d      	ldr	r2, [pc, #180]	; (400f08 <SystemCoreClockUpdate+0x10c>)
  400e54:	4b29      	ldr	r3, [pc, #164]	; (400efc <SystemCoreClockUpdate+0x100>)
  400e56:	601a      	str	r2, [r3, #0]
			break;
  400e58:	e034      	b.n	400ec4 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e5a:	4a29      	ldr	r2, [pc, #164]	; (400f00 <SystemCoreClockUpdate+0x104>)
  400e5c:	4b27      	ldr	r3, [pc, #156]	; (400efc <SystemCoreClockUpdate+0x100>)
  400e5e:	601a      	str	r2, [r3, #0]
			break;
  400e60:	e030      	b.n	400ec4 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e62:	4b24      	ldr	r3, [pc, #144]	; (400ef4 <SystemCoreClockUpdate+0xf8>)
  400e64:	6a1b      	ldr	r3, [r3, #32]
  400e66:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e6a:	d003      	beq.n	400e74 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400e6c:	4a24      	ldr	r2, [pc, #144]	; (400f00 <SystemCoreClockUpdate+0x104>)
  400e6e:	4b23      	ldr	r3, [pc, #140]	; (400efc <SystemCoreClockUpdate+0x100>)
  400e70:	601a      	str	r2, [r3, #0]
  400e72:	e012      	b.n	400e9a <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e74:	4a23      	ldr	r2, [pc, #140]	; (400f04 <SystemCoreClockUpdate+0x108>)
  400e76:	4b21      	ldr	r3, [pc, #132]	; (400efc <SystemCoreClockUpdate+0x100>)
  400e78:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e7a:	4b1e      	ldr	r3, [pc, #120]	; (400ef4 <SystemCoreClockUpdate+0xf8>)
  400e7c:	6a1b      	ldr	r3, [r3, #32]
  400e7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e82:	2b10      	cmp	r3, #16
  400e84:	d002      	beq.n	400e8c <SystemCoreClockUpdate+0x90>
  400e86:	2b20      	cmp	r3, #32
  400e88:	d004      	beq.n	400e94 <SystemCoreClockUpdate+0x98>
  400e8a:	e006      	b.n	400e9a <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e8c:	4a1e      	ldr	r2, [pc, #120]	; (400f08 <SystemCoreClockUpdate+0x10c>)
  400e8e:	4b1b      	ldr	r3, [pc, #108]	; (400efc <SystemCoreClockUpdate+0x100>)
  400e90:	601a      	str	r2, [r3, #0]
					break;
  400e92:	e002      	b.n	400e9a <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e94:	4a1a      	ldr	r2, [pc, #104]	; (400f00 <SystemCoreClockUpdate+0x104>)
  400e96:	4b19      	ldr	r3, [pc, #100]	; (400efc <SystemCoreClockUpdate+0x100>)
  400e98:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400e9a:	4b16      	ldr	r3, [pc, #88]	; (400ef4 <SystemCoreClockUpdate+0xf8>)
  400e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e9e:	f003 0303 	and.w	r3, r3, #3
  400ea2:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400ea4:	4a13      	ldr	r2, [pc, #76]	; (400ef4 <SystemCoreClockUpdate+0xf8>)
  400ea6:	bf07      	ittee	eq
  400ea8:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400eaa:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400eac:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400eae:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400eb0:	4812      	ldr	r0, [pc, #72]	; (400efc <SystemCoreClockUpdate+0x100>)
  400eb2:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400eb6:	6803      	ldr	r3, [r0, #0]
  400eb8:	fb01 3303 	mla	r3, r1, r3, r3
  400ebc:	b2d2      	uxtb	r2, r2
  400ebe:	fbb3 f3f2 	udiv	r3, r3, r2
  400ec2:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400ec4:	4b0b      	ldr	r3, [pc, #44]	; (400ef4 <SystemCoreClockUpdate+0xf8>)
  400ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ecc:	2b70      	cmp	r3, #112	; 0x70
  400ece:	d107      	bne.n	400ee0 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400ed0:	4a0a      	ldr	r2, [pc, #40]	; (400efc <SystemCoreClockUpdate+0x100>)
  400ed2:	6813      	ldr	r3, [r2, #0]
  400ed4:	490d      	ldr	r1, [pc, #52]	; (400f0c <SystemCoreClockUpdate+0x110>)
  400ed6:	fba1 1303 	umull	r1, r3, r1, r3
  400eda:	085b      	lsrs	r3, r3, #1
  400edc:	6013      	str	r3, [r2, #0]
  400ede:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400ee0:	4b04      	ldr	r3, [pc, #16]	; (400ef4 <SystemCoreClockUpdate+0xf8>)
  400ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400ee4:	4905      	ldr	r1, [pc, #20]	; (400efc <SystemCoreClockUpdate+0x100>)
  400ee6:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400eea:	680b      	ldr	r3, [r1, #0]
  400eec:	40d3      	lsrs	r3, r2
  400eee:	600b      	str	r3, [r1, #0]
  400ef0:	4770      	bx	lr
  400ef2:	bf00      	nop
  400ef4:	400e0400 	.word	0x400e0400
  400ef8:	400e1410 	.word	0x400e1410
  400efc:	20000408 	.word	0x20000408
  400f00:	00b71b00 	.word	0x00b71b00
  400f04:	003d0900 	.word	0x003d0900
  400f08:	007a1200 	.word	0x007a1200
  400f0c:	aaaaaaab 	.word	0xaaaaaaab

00400f10 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400f10:	4b1a      	ldr	r3, [pc, #104]	; (400f7c <system_init_flash+0x6c>)
  400f12:	4298      	cmp	r0, r3
  400f14:	d807      	bhi.n	400f26 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400f16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400f1a:	4a19      	ldr	r2, [pc, #100]	; (400f80 <system_init_flash+0x70>)
  400f1c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400f1e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f22:	6013      	str	r3, [r2, #0]
  400f24:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400f26:	4b17      	ldr	r3, [pc, #92]	; (400f84 <system_init_flash+0x74>)
  400f28:	4298      	cmp	r0, r3
  400f2a:	d806      	bhi.n	400f3a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f2c:	4b16      	ldr	r3, [pc, #88]	; (400f88 <system_init_flash+0x78>)
  400f2e:	4a14      	ldr	r2, [pc, #80]	; (400f80 <system_init_flash+0x70>)
  400f30:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f32:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f36:	6013      	str	r3, [r2, #0]
  400f38:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400f3a:	4b14      	ldr	r3, [pc, #80]	; (400f8c <system_init_flash+0x7c>)
  400f3c:	4298      	cmp	r0, r3
  400f3e:	d806      	bhi.n	400f4e <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f40:	4b13      	ldr	r3, [pc, #76]	; (400f90 <system_init_flash+0x80>)
  400f42:	4a0f      	ldr	r2, [pc, #60]	; (400f80 <system_init_flash+0x70>)
  400f44:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f46:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f4a:	6013      	str	r3, [r2, #0]
  400f4c:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400f4e:	4b11      	ldr	r3, [pc, #68]	; (400f94 <system_init_flash+0x84>)
  400f50:	4298      	cmp	r0, r3
  400f52:	d806      	bhi.n	400f62 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f54:	4b10      	ldr	r3, [pc, #64]	; (400f98 <system_init_flash+0x88>)
  400f56:	4a0a      	ldr	r2, [pc, #40]	; (400f80 <system_init_flash+0x70>)
  400f58:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f5a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f5e:	6013      	str	r3, [r2, #0]
  400f60:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400f62:	4b0e      	ldr	r3, [pc, #56]	; (400f9c <system_init_flash+0x8c>)
  400f64:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400f66:	bf94      	ite	ls
  400f68:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f6c:	4b0c      	ldrhi	r3, [pc, #48]	; (400fa0 <system_init_flash+0x90>)
  400f6e:	4a04      	ldr	r2, [pc, #16]	; (400f80 <system_init_flash+0x70>)
  400f70:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f72:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f76:	6013      	str	r3, [r2, #0]
  400f78:	4770      	bx	lr
  400f7a:	bf00      	nop
  400f7c:	01312cff 	.word	0x01312cff
  400f80:	400e0a00 	.word	0x400e0a00
  400f84:	026259ff 	.word	0x026259ff
  400f88:	04000100 	.word	0x04000100
  400f8c:	039386ff 	.word	0x039386ff
  400f90:	04000200 	.word	0x04000200
  400f94:	04c4b3ff 	.word	0x04c4b3ff
  400f98:	04000300 	.word	0x04000300
  400f9c:	05f5e0ff 	.word	0x05f5e0ff
  400fa0:	04000500 	.word	0x04000500

00400fa4 <Button_Handler>:
#define PWML2_CHANNEL PWM_CHANNEL_2

void Button_Handler(uint32_t id, uint32_t mask){
	uint32_t led;

	if(ID_PIOA == id && PIO_PA0 == mask){led = LED1;}
  400fa4:	280b      	cmp	r0, #11
  400fa6:	d102      	bne.n	400fae <Button_Handler+0xa>
  400fa8:	2901      	cmp	r1, #1
  400faa:	d11d      	bne.n	400fe8 <Button_Handler+0x44>
  400fac:	e009      	b.n	400fc2 <Button_Handler+0x1e>
	else if(ID_PIOC == id && PIO_PC29 == mask){led = LED2;}
  400fae:	280d      	cmp	r0, #13
  400fb0:	d11a      	bne.n	400fe8 <Button_Handler+0x44>
  400fb2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400fb6:	d006      	beq.n	400fc6 <Button_Handler+0x22>
	else if(ID_PIOC == id && PIO_PC30 == mask){led = LED3;}
  400fb8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  400fbc:	d114      	bne.n	400fe8 <Button_Handler+0x44>
  400fbe:	2256      	movs	r2, #86	; 0x56
  400fc0:	e002      	b.n	400fc8 <Button_Handler+0x24>
#define PWML2_CHANNEL PWM_CHANNEL_2

void Button_Handler(uint32_t id, uint32_t mask){
	uint32_t led;

	if(ID_PIOA == id && PIO_PA0 == mask){led = LED1;}
  400fc2:	2254      	movs	r2, #84	; 0x54
  400fc4:	e000      	b.n	400fc8 <Button_Handler+0x24>
	else if(ID_PIOC == id && PIO_PC29 == mask){led = LED2;}
  400fc6:	2210      	movs	r2, #16
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400fc8:	0953      	lsrs	r3, r2, #5
  400fca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400fce:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400fd2:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400fd4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400fd6:	f002 011f 	and.w	r1, r2, #31
  400fda:	2201      	movs	r2, #1
  400fdc:	408a      	lsls	r2, r1
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
  400fde:	4210      	tst	r0, r2
  400fe0:	d101      	bne.n	400fe6 <Button_Handler+0x42>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400fe2:	631a      	str	r2, [r3, #48]	; 0x30
  400fe4:	4770      	bx	lr
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400fe6:	635a      	str	r2, [r3, #52]	; 0x34
  400fe8:	4770      	bx	lr
  400fea:	bf00      	nop

00400fec <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  400fec:	b570      	push	{r4, r5, r6, lr}
  400fee:	b082      	sub	sp, #8
  400ff0:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400ff2:	ac02      	add	r4, sp, #8
  400ff4:	2302      	movs	r3, #2
  400ff6:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400ffa:	4d09      	ldr	r5, [pc, #36]	; (401020 <ssd1306_write_command+0x34>)
  400ffc:	4621      	mov	r1, r4
  400ffe:	4628      	mov	r0, r5
  401000:	4b08      	ldr	r3, [pc, #32]	; (401024 <ssd1306_write_command+0x38>)
  401002:	4798      	blx	r3
  401004:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401008:	4b07      	ldr	r3, [pc, #28]	; (401028 <ssd1306_write_command+0x3c>)
  40100a:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40100c:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  40100e:	2056      	movs	r0, #86	; 0x56
  401010:	4b06      	ldr	r3, [pc, #24]	; (40102c <ssd1306_write_command+0x40>)
  401012:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401014:	4621      	mov	r1, r4
  401016:	4628      	mov	r0, r5
  401018:	4b05      	ldr	r3, [pc, #20]	; (401030 <ssd1306_write_command+0x44>)
  40101a:	4798      	blx	r3
#endif
}
  40101c:	b002      	add	sp, #8
  40101e:	bd70      	pop	{r4, r5, r6, pc}
  401020:	40008000 	.word	0x40008000
  401024:	004003ad 	.word	0x004003ad
  401028:	400e1200 	.word	0x400e1200
  40102c:	20000001 	.word	0x20000001
  401030:	004003d9 	.word	0x004003d9

00401034 <configure_buttons>:
	else{return;}
	
	ioport_set_pin_level(led, !ioport_get_pin_level(led));
}

void configure_buttons(void){
  401034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401038:	b083      	sub	sp, #12
	const uint32_t irq_priority = 5;
	//Configure Pushbutton 1
	pmc_enable_periph_clk(ID_PIOA);
  40103a:	200b      	movs	r0, #11
  40103c:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 401100 <configure_buttons+0xcc>
  401040:	47d8      	blx	fp
	pio_set_debounce_filter(PIOA, PIN_PUSHBUTTON_1_MASK, 10);
  401042:	4c2a      	ldr	r4, [pc, #168]	; (4010ec <configure_buttons+0xb8>)
  401044:	220a      	movs	r2, #10
  401046:	2101      	movs	r1, #1
  401048:	4620      	mov	r0, r4
  40104a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 401104 <configure_buttons+0xd0>
  40104e:	47d0      	blx	sl
	pio_handler_set(PIOA, ID_PIOA,
  401050:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 401108 <configure_buttons+0xd4>
  401054:	f8cd 9000 	str.w	r9, [sp]
  401058:	2379      	movs	r3, #121	; 0x79
  40105a:	2201      	movs	r2, #1
  40105c:	210b      	movs	r1, #11
  40105e:	4620      	mov	r0, r4
  401060:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 40110c <configure_buttons+0xd8>
  401064:	47c0      	blx	r8
  401066:	4f22      	ldr	r7, [pc, #136]	; (4010f0 <configure_buttons+0xbc>)
  401068:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40106c:	603b      	str	r3, [r7, #0]
	PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button_Handler);
	NVIC_EnableIRQ((IRQn_Type) ID_PIOA);
	pio_handler_set_priority(PIOA, (IRQn_Type) ID_PIOA, irq_priority);
  40106e:	2205      	movs	r2, #5
  401070:	210b      	movs	r1, #11
  401072:	4620      	mov	r0, r4
  401074:	4e1f      	ldr	r6, [pc, #124]	; (4010f4 <configure_buttons+0xc0>)
  401076:	47b0      	blx	r6
	pio_enable_interrupt(PIOA, PIN_PUSHBUTTON_1_MASK);
  401078:	2101      	movs	r1, #1
  40107a:	4620      	mov	r0, r4
  40107c:	4d1e      	ldr	r5, [pc, #120]	; (4010f8 <configure_buttons+0xc4>)
  40107e:	47a8      	blx	r5

	//Configure Pushbutton 2
	pmc_enable_periph_clk(ID_PIOC);
  401080:	200d      	movs	r0, #13
  401082:	47d8      	blx	fp
	pio_set_debounce_filter(PIOC, PIN_PUSHBUTTON_2_MASK, 10);
  401084:	220a      	movs	r2, #10
  401086:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40108a:	481c      	ldr	r0, [pc, #112]	; (4010fc <configure_buttons+0xc8>)
  40108c:	47d0      	blx	sl
	pio_handler_set(PIOC, ID_PIOC,
  40108e:	f8cd 9000 	str.w	r9, [sp]
  401092:	2379      	movs	r3, #121	; 0x79
  401094:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401098:	210d      	movs	r1, #13
  40109a:	4818      	ldr	r0, [pc, #96]	; (4010fc <configure_buttons+0xc8>)
  40109c:	47c0      	blx	r8
  40109e:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  4010a2:	603c      	str	r4, [r7, #0]
	PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, Button_Handler);
	NVIC_EnableIRQ((IRQn_Type) ID_PIOC);
	pio_handler_set_priority(PIOC, (IRQn_Type) ID_PIOC, irq_priority);
  4010a4:	2205      	movs	r2, #5
  4010a6:	210d      	movs	r1, #13
  4010a8:	4814      	ldr	r0, [pc, #80]	; (4010fc <configure_buttons+0xc8>)
  4010aa:	47b0      	blx	r6
	pio_enable_interrupt(PIOC, PIN_PUSHBUTTON_2_MASK);
  4010ac:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4010b0:	4812      	ldr	r0, [pc, #72]	; (4010fc <configure_buttons+0xc8>)
  4010b2:	47a8      	blx	r5

	//Configure Pushbutton 3
	pmc_enable_periph_clk(ID_PIOC);
  4010b4:	200d      	movs	r0, #13
  4010b6:	47d8      	blx	fp
	pio_set_debounce_filter(PIOC, PIN_PUSHBUTTON_3_MASK, 10);
  4010b8:	220a      	movs	r2, #10
  4010ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4010be:	480f      	ldr	r0, [pc, #60]	; (4010fc <configure_buttons+0xc8>)
  4010c0:	47d0      	blx	sl
	pio_handler_set(PIOC, ID_PIOC,
  4010c2:	f8cd 9000 	str.w	r9, [sp]
  4010c6:	2379      	movs	r3, #121	; 0x79
  4010c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4010cc:	210d      	movs	r1, #13
  4010ce:	480b      	ldr	r0, [pc, #44]	; (4010fc <configure_buttons+0xc8>)
  4010d0:	47c0      	blx	r8
  4010d2:	603c      	str	r4, [r7, #0]
	PIN_PUSHBUTTON_3_MASK, PIN_PUSHBUTTON_3_ATTR, Button_Handler);
	NVIC_EnableIRQ((IRQn_Type) ID_PIOC);
	pio_handler_set_priority(PIOC, (IRQn_Type) ID_PIOC, irq_priority);
  4010d4:	2205      	movs	r2, #5
  4010d6:	210d      	movs	r1, #13
  4010d8:	4808      	ldr	r0, [pc, #32]	; (4010fc <configure_buttons+0xc8>)
  4010da:	47b0      	blx	r6
	pio_enable_interrupt(PIOC, PIN_PUSHBUTTON_3_MASK);
  4010dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4010e0:	4806      	ldr	r0, [pc, #24]	; (4010fc <configure_buttons+0xc8>)
  4010e2:	47a8      	blx	r5
}
  4010e4:	b003      	add	sp, #12
  4010e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4010ea:	bf00      	nop
  4010ec:	400e0e00 	.word	0x400e0e00
  4010f0:	e000e100 	.word	0xe000e100
  4010f4:	00400a51 	.word	0x00400a51
  4010f8:	00400835 	.word	0x00400835
  4010fc:	400e1200 	.word	0x400e1200
  401100:	00400bbd 	.word	0x00400bbd
  401104:	004006fd 	.word	0x004006fd
  401108:	00400fa5 	.word	0x00400fa5
  40110c:	004009d5 	.word	0x004009d5

00401110 <printOLED>:

void printOLED(uint32_t row, uint32_t col, uint32_t text){
  401110:	b570      	push	{r4, r5, r6, lr}
  401112:	460c      	mov	r4, r1
  401114:	4616      	mov	r6, r2
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401116:	f000 0007 	and.w	r0, r0, #7
  40111a:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  40111e:	4d07      	ldr	r5, [pc, #28]	; (40113c <printOLED+0x2c>)
  401120:	47a8      	blx	r5
	ssd1306_set_page_address(row);
	ssd1306_set_column_address(col);
  401122:	b2e4      	uxtb	r4, r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  401124:	f3c4 1002 	ubfx	r0, r4, #4, #3
  401128:	f040 0010 	orr.w	r0, r0, #16
  40112c:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  40112e:	f004 000f 	and.w	r0, r4, #15
  401132:	47a8      	blx	r5
	ssd1306_write_text(text);
  401134:	4630      	mov	r0, r6
  401136:	4b02      	ldr	r3, [pc, #8]	; (401140 <printOLED+0x30>)
  401138:	4798      	blx	r3
  40113a:	bd70      	pop	{r4, r5, r6, pc}
  40113c:	00400fed 	.word	0x00400fed
  401140:	00400229 	.word	0x00400229

00401144 <typeScreen>:
}

void typeScreen(void){
  401144:	b510      	push	{r4, lr}
	printOLED(3,0,"Type");
  401146:	4a07      	ldr	r2, [pc, #28]	; (401164 <typeScreen+0x20>)
  401148:	2100      	movs	r1, #0
  40114a:	2003      	movs	r0, #3
  40114c:	4c06      	ldr	r4, [pc, #24]	; (401168 <typeScreen+0x24>)
  40114e:	47a0      	blx	r4
	printOLED(3,45,"Quantity");
  401150:	4a06      	ldr	r2, [pc, #24]	; (40116c <typeScreen+0x28>)
  401152:	212d      	movs	r1, #45	; 0x2d
  401154:	2003      	movs	r0, #3
  401156:	47a0      	blx	r4
	printOLED(3,114,"Roll");
  401158:	4a05      	ldr	r2, [pc, #20]	; (401170 <typeScreen+0x2c>)
  40115a:	2172      	movs	r1, #114	; 0x72
  40115c:	2003      	movs	r0, #3
  40115e:	47a0      	blx	r4
  401160:	bd10      	pop	{r4, pc}
  401162:	bf00      	nop
  401164:	00402238 	.word	0x00402238
  401168:	00401111 	.word	0x00401111
  40116c:	00402240 	.word	0x00402240
  401170:	0040224c 	.word	0x0040224c

00401174 <quantityScreen>:
}

void quantityScreen(void){
  401174:	b510      	push	{r4, lr}
	printOLED(3,0,"Increase");
  401176:	4a07      	ldr	r2, [pc, #28]	; (401194 <quantityScreen+0x20>)
  401178:	2100      	movs	r1, #0
  40117a:	2003      	movs	r0, #3
  40117c:	4c06      	ldr	r4, [pc, #24]	; (401198 <quantityScreen+0x24>)
  40117e:	47a0      	blx	r4
	printOLED(3,55,"Back");
  401180:	4a06      	ldr	r2, [pc, #24]	; (40119c <quantityScreen+0x28>)
  401182:	2137      	movs	r1, #55	; 0x37
  401184:	2003      	movs	r0, #3
  401186:	47a0      	blx	r4
	printOLED(3,88,"Decrease");
  401188:	4a05      	ldr	r2, [pc, #20]	; (4011a0 <quantityScreen+0x2c>)
  40118a:	2158      	movs	r1, #88	; 0x58
  40118c:	2003      	movs	r0, #3
  40118e:	47a0      	blx	r4
  401190:	bd10      	pop	{r4, pc}
  401192:	bf00      	nop
  401194:	00402254 	.word	0x00402254
  401198:	00401111 	.word	0x00401111
  40119c:	00402260 	.word	0x00402260
  4011a0:	00402268 	.word	0x00402268

004011a4 <displayAllTypes>:
}

void displayAllTypes(void){
  4011a4:	b510      	push	{r4, lr}
	printOLED(0,0,"4-Sided");
  4011a6:	4a0d      	ldr	r2, [pc, #52]	; (4011dc <displayAllTypes+0x38>)
  4011a8:	2100      	movs	r1, #0
  4011aa:	4608      	mov	r0, r1
  4011ac:	4c0c      	ldr	r4, [pc, #48]	; (4011e0 <displayAllTypes+0x3c>)
  4011ae:	47a0      	blx	r4
	printOLED(1,0,"6-Sided");
  4011b0:	4a0c      	ldr	r2, [pc, #48]	; (4011e4 <displayAllTypes+0x40>)
  4011b2:	2100      	movs	r1, #0
  4011b4:	2001      	movs	r0, #1
  4011b6:	47a0      	blx	r4
	printOLED(2,0,"8-Sided");
  4011b8:	4a0b      	ldr	r2, [pc, #44]	; (4011e8 <displayAllTypes+0x44>)
  4011ba:	2100      	movs	r1, #0
  4011bc:	2002      	movs	r0, #2
  4011be:	47a0      	blx	r4
	printOLED(0,55,"10-Sided");
  4011c0:	4a0a      	ldr	r2, [pc, #40]	; (4011ec <displayAllTypes+0x48>)
  4011c2:	2137      	movs	r1, #55	; 0x37
  4011c4:	2000      	movs	r0, #0
  4011c6:	47a0      	blx	r4
	printOLED(1,55,"12-Sided");
  4011c8:	4a09      	ldr	r2, [pc, #36]	; (4011f0 <displayAllTypes+0x4c>)
  4011ca:	2137      	movs	r1, #55	; 0x37
  4011cc:	2001      	movs	r0, #1
  4011ce:	47a0      	blx	r4
	printOLED(2,55,"20-Sided");
  4011d0:	4a08      	ldr	r2, [pc, #32]	; (4011f4 <displayAllTypes+0x50>)
  4011d2:	2137      	movs	r1, #55	; 0x37
  4011d4:	2002      	movs	r0, #2
  4011d6:	47a0      	blx	r4
  4011d8:	bd10      	pop	{r4, pc}
  4011da:	bf00      	nop
  4011dc:	00402274 	.word	0x00402274
  4011e0:	00401111 	.word	0x00401111
  4011e4:	0040227c 	.word	0x0040227c
  4011e8:	00402284 	.word	0x00402284
  4011ec:	0040228c 	.word	0x0040228c
  4011f0:	00402298 	.word	0x00402298
  4011f4:	004022a4 	.word	0x004022a4

004011f8 <displayAllQty>:
}

void displayAllQty(uint8_t qt1, uint8_t qt2, uint8_t qt3, uint8_t qt4, uint8_t qt5, uint8_t qt6){
  4011f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011fc:	b082      	sub	sp, #8
  4011fe:	4688      	mov	r8, r1
  401200:	4617      	mov	r7, r2
  401202:	461e      	mov	r6, r3
	char num[5];
	printOLED(0,39,itoa(qt1, num, 10));
  401204:	220a      	movs	r2, #10
  401206:	4669      	mov	r1, sp
  401208:	4d19      	ldr	r5, [pc, #100]	; (401270 <displayAllQty+0x78>)
  40120a:	47a8      	blx	r5
  40120c:	4602      	mov	r2, r0
  40120e:	2127      	movs	r1, #39	; 0x27
  401210:	2000      	movs	r0, #0
  401212:	4c18      	ldr	r4, [pc, #96]	; (401274 <displayAllQty+0x7c>)
  401214:	47a0      	blx	r4
	printOLED(1,39,itoa(qt2, num, 10));
  401216:	220a      	movs	r2, #10
  401218:	4669      	mov	r1, sp
  40121a:	4640      	mov	r0, r8
  40121c:	47a8      	blx	r5
  40121e:	4602      	mov	r2, r0
  401220:	2127      	movs	r1, #39	; 0x27
  401222:	2001      	movs	r0, #1
  401224:	47a0      	blx	r4
	printOLED(2,39,itoa(qt3, num, 10));
  401226:	220a      	movs	r2, #10
  401228:	4669      	mov	r1, sp
  40122a:	4638      	mov	r0, r7
  40122c:	47a8      	blx	r5
  40122e:	4602      	mov	r2, r0
  401230:	2127      	movs	r1, #39	; 0x27
  401232:	2002      	movs	r0, #2
  401234:	47a0      	blx	r4
	printOLED(0,100,itoa(qt4, num, 10));
  401236:	220a      	movs	r2, #10
  401238:	4669      	mov	r1, sp
  40123a:	4630      	mov	r0, r6
  40123c:	47a8      	blx	r5
  40123e:	4602      	mov	r2, r0
  401240:	2164      	movs	r1, #100	; 0x64
  401242:	2000      	movs	r0, #0
  401244:	47a0      	blx	r4
	printOLED(1,100,itoa(qt5, num, 10));
  401246:	220a      	movs	r2, #10
  401248:	4669      	mov	r1, sp
  40124a:	f89d 0020 	ldrb.w	r0, [sp, #32]
  40124e:	47a8      	blx	r5
  401250:	4602      	mov	r2, r0
  401252:	2164      	movs	r1, #100	; 0x64
  401254:	2001      	movs	r0, #1
  401256:	47a0      	blx	r4
	printOLED(2,100,itoa(qt6, num, 10));
  401258:	220a      	movs	r2, #10
  40125a:	4669      	mov	r1, sp
  40125c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
  401260:	47a8      	blx	r5
  401262:	4602      	mov	r2, r0
  401264:	2164      	movs	r1, #100	; 0x64
  401266:	2002      	movs	r0, #2
  401268:	47a0      	blx	r4
}
  40126a:	b002      	add	sp, #8
  40126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401270:	00402001 	.word	0x00402001
  401274:	00401111 	.word	0x00401111

00401278 <standardDisplay>:

void standardDisplay(uint8_t qt1, uint8_t qt2, uint8_t qt3, uint8_t qt4, uint8_t qt5, uint8_t qt6){
  401278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40127c:	b085      	sub	sp, #20
  40127e:	4604      	mov	r4, r0
  401280:	460d      	mov	r5, r1
  401282:	4616      	mov	r6, r2
  401284:	461f      	mov	r7, r3
	displayAllTypes();
  401286:	4b21      	ldr	r3, [pc, #132]	; (40130c <standardDisplay+0x94>)
  401288:	4798      	blx	r3
	displayAllQty(qt1, qt2, qt3, qt4, qt5, qt6);
  40128a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  40128e:	9301      	str	r3, [sp, #4]
  401290:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  401294:	9300      	str	r3, [sp, #0]
  401296:	463b      	mov	r3, r7
  401298:	4632      	mov	r2, r6
  40129a:	4629      	mov	r1, r5
  40129c:	4620      	mov	r0, r4
  40129e:	4c1c      	ldr	r4, [pc, #112]	; (401310 <standardDisplay+0x98>)
  4012a0:	47a0      	blx	r4
	delay_ms(300);
  4012a2:	481c      	ldr	r0, [pc, #112]	; (401314 <standardDisplay+0x9c>)
  4012a4:	4b1c      	ldr	r3, [pc, #112]	; (401318 <standardDisplay+0xa0>)
  4012a6:	4798      	blx	r3
  4012a8:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4012ac:	f8df b074 	ldr.w	fp, [pc, #116]	; 401324 <standardDisplay+0xac>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4012b0:	4f1a      	ldr	r7, [pc, #104]	; (40131c <standardDisplay+0xa4>)
  4012b2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 401328 <standardDisplay+0xb0>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012b6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 40132c <standardDisplay+0xb4>
  4012ba:	463e      	mov	r6, r7
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4012bc:	f00a 0007 	and.w	r0, sl, #7
  4012c0:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4012c4:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4012c6:	2010      	movs	r0, #16
  4012c8:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4012ca:	2000      	movs	r0, #0
  4012cc:	47d8      	blx	fp
  4012ce:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4012d0:	ac04      	add	r4, sp, #16
  4012d2:	2302      	movs	r3, #2
  4012d4:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4012d8:	4621      	mov	r1, r4
  4012da:	4630      	mov	r0, r6
  4012dc:	47c8      	blx	r9
  4012de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4012e2:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  4012e6:	2300      	movs	r3, #0
  4012e8:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4012ea:	2056      	movs	r0, #86	; 0x56
  4012ec:	4b0a      	ldr	r3, [pc, #40]	; (401318 <standardDisplay+0xa0>)
  4012ee:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4012f0:	4621      	mov	r1, r4
  4012f2:	4630      	mov	r0, r6
  4012f4:	4b0a      	ldr	r3, [pc, #40]	; (401320 <standardDisplay+0xa8>)
  4012f6:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  4012f8:	3d01      	subs	r5, #1
  4012fa:	d1e9      	bne.n	4012d0 <standardDisplay+0x58>
  4012fc:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  401300:	f1ba 0f04 	cmp.w	sl, #4
  401304:	d1da      	bne.n	4012bc <standardDisplay+0x44>
	ssd1306_clear();
}
  401306:	b005      	add	sp, #20
  401308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40130c:	004011a5 	.word	0x004011a5
  401310:	004011f9 	.word	0x004011f9
  401314:	00273ca5 	.word	0x00273ca5
  401318:	20000001 	.word	0x20000001
  40131c:	40008000 	.word	0x40008000
  401320:	004003d9 	.word	0x004003d9
  401324:	00400fed 	.word	0x00400fed
  401328:	004003ad 	.word	0x004003ad
  40132c:	400e1200 	.word	0x400e1200

00401330 <blinkTypes>:

void blinkTypes(uint8_t D4, uint8_t D6, uint8_t D8, uint8_t D10, uint8_t D12, uint8_t D20, uint8_t qt1, uint8_t qt2, uint8_t qt3, uint8_t qt4, uint8_t qt5, uint8_t qt6){
  401330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401334:	b089      	sub	sp, #36	; 0x24
  401336:	4682      	mov	sl, r0
  401338:	9103      	str	r1, [sp, #12]
  40133a:	9204      	str	r2, [sp, #16]
  40133c:	9305      	str	r3, [sp, #20]
  40133e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
  401342:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  401346:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
  40134a:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
  40134e:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
  401352:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
	typeScreen();
  401356:	4b40      	ldr	r3, [pc, #256]	; (401458 <blinkTypes+0x128>)
  401358:	4798      	blx	r3
	standardDisplay(qt1, qt2, qt3, qt4, qt5, qt6);
  40135a:	f8cd 9004 	str.w	r9, [sp, #4]
  40135e:	f8cd 8000 	str.w	r8, [sp]
  401362:	463b      	mov	r3, r7
  401364:	4632      	mov	r2, r6
  401366:	4629      	mov	r1, r5
  401368:	4620      	mov	r0, r4
  40136a:	f8df b120 	ldr.w	fp, [pc, #288]	; 40148c <blinkTypes+0x15c>
  40136e:	47d8      	blx	fp
	if(D4 == 1){printOLED(0,0,"4-Sided");}
  401370:	f1ba 0f01 	cmp.w	sl, #1
  401374:	d104      	bne.n	401380 <blinkTypes+0x50>
  401376:	4a39      	ldr	r2, [pc, #228]	; (40145c <blinkTypes+0x12c>)
  401378:	2100      	movs	r1, #0
  40137a:	4608      	mov	r0, r1
  40137c:	4b38      	ldr	r3, [pc, #224]	; (401460 <blinkTypes+0x130>)
  40137e:	4798      	blx	r3
	if(D6 == 1){printOLED(1,0,"6-Sided");}
  401380:	9b03      	ldr	r3, [sp, #12]
  401382:	2b01      	cmp	r3, #1
  401384:	d104      	bne.n	401390 <blinkTypes+0x60>
  401386:	4a37      	ldr	r2, [pc, #220]	; (401464 <blinkTypes+0x134>)
  401388:	2100      	movs	r1, #0
  40138a:	2001      	movs	r0, #1
  40138c:	4b34      	ldr	r3, [pc, #208]	; (401460 <blinkTypes+0x130>)
  40138e:	4798      	blx	r3
	if(D8 == 1){printOLED(2,0,"8-Sided");}
  401390:	9b04      	ldr	r3, [sp, #16]
  401392:	2b01      	cmp	r3, #1
  401394:	d104      	bne.n	4013a0 <blinkTypes+0x70>
  401396:	4a34      	ldr	r2, [pc, #208]	; (401468 <blinkTypes+0x138>)
  401398:	2100      	movs	r1, #0
  40139a:	2002      	movs	r0, #2
  40139c:	4b30      	ldr	r3, [pc, #192]	; (401460 <blinkTypes+0x130>)
  40139e:	4798      	blx	r3
	if(D10 == 1){printOLED(0,55,"10-Sided");}
  4013a0:	9b05      	ldr	r3, [sp, #20]
  4013a2:	2b01      	cmp	r3, #1
  4013a4:	d104      	bne.n	4013b0 <blinkTypes+0x80>
  4013a6:	4a31      	ldr	r2, [pc, #196]	; (40146c <blinkTypes+0x13c>)
  4013a8:	2137      	movs	r1, #55	; 0x37
  4013aa:	2000      	movs	r0, #0
  4013ac:	4b2c      	ldr	r3, [pc, #176]	; (401460 <blinkTypes+0x130>)
  4013ae:	4798      	blx	r3
	if(D12 == 1){printOLED(1,55,"12-Sided");}
  4013b0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
  4013b4:	2b01      	cmp	r3, #1
  4013b6:	d104      	bne.n	4013c2 <blinkTypes+0x92>
  4013b8:	4a2d      	ldr	r2, [pc, #180]	; (401470 <blinkTypes+0x140>)
  4013ba:	2137      	movs	r1, #55	; 0x37
  4013bc:	2001      	movs	r0, #1
  4013be:	4b28      	ldr	r3, [pc, #160]	; (401460 <blinkTypes+0x130>)
  4013c0:	4798      	blx	r3
	if(D20 == 1){printOLED(2,55,"20-Sided");}
  4013c2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
  4013c6:	2b01      	cmp	r3, #1
  4013c8:	d104      	bne.n	4013d4 <blinkTypes+0xa4>
  4013ca:	4a2a      	ldr	r2, [pc, #168]	; (401474 <blinkTypes+0x144>)
  4013cc:	2137      	movs	r1, #55	; 0x37
  4013ce:	2002      	movs	r0, #2
  4013d0:	4b23      	ldr	r3, [pc, #140]	; (401460 <blinkTypes+0x130>)
  4013d2:	4798      	blx	r3
	displayAllQty(qt1, qt2, qt3, qt4, qt5, qt6);
  4013d4:	f8cd 9004 	str.w	r9, [sp, #4]
  4013d8:	f8cd 8000 	str.w	r8, [sp]
  4013dc:	463b      	mov	r3, r7
  4013de:	4632      	mov	r2, r6
  4013e0:	4629      	mov	r1, r5
  4013e2:	4620      	mov	r0, r4
  4013e4:	4c24      	ldr	r4, [pc, #144]	; (401478 <blinkTypes+0x148>)
  4013e6:	47a0      	blx	r4
	typeScreen();
  4013e8:	4b1b      	ldr	r3, [pc, #108]	; (401458 <blinkTypes+0x128>)
  4013ea:	4798      	blx	r3
	delay_ms(300);
  4013ec:	4823      	ldr	r0, [pc, #140]	; (40147c <blinkTypes+0x14c>)
  4013ee:	4b24      	ldr	r3, [pc, #144]	; (401480 <blinkTypes+0x150>)
  4013f0:	4798      	blx	r3
  4013f2:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4013f6:	f8df b098 	ldr.w	fp, [pc, #152]	; 401490 <blinkTypes+0x160>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4013fa:	4f22      	ldr	r7, [pc, #136]	; (401484 <blinkTypes+0x154>)
  4013fc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401494 <blinkTypes+0x164>
  401400:	f8df 8094 	ldr.w	r8, [pc, #148]	; 401498 <blinkTypes+0x168>
  401404:	463e      	mov	r6, r7
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401406:	f00a 0007 	and.w	r0, sl, #7
  40140a:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  40140e:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  401410:	2010      	movs	r0, #16
  401412:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  401414:	2000      	movs	r0, #0
  401416:	47d8      	blx	fp
  401418:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40141a:	ac08      	add	r4, sp, #32
  40141c:	2302      	movs	r3, #2
  40141e:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  401422:	4621      	mov	r1, r4
  401424:	4630      	mov	r0, r6
  401426:	47c8      	blx	r9
  401428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  40142c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  401430:	2300      	movs	r3, #0
  401432:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  401434:	2056      	movs	r0, #86	; 0x56
  401436:	4b12      	ldr	r3, [pc, #72]	; (401480 <blinkTypes+0x150>)
  401438:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  40143a:	4621      	mov	r1, r4
  40143c:	4630      	mov	r0, r6
  40143e:	4b12      	ldr	r3, [pc, #72]	; (401488 <blinkTypes+0x158>)
  401440:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  401442:	3d01      	subs	r5, #1
  401444:	d1e9      	bne.n	40141a <blinkTypes+0xea>
  401446:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  40144a:	f1ba 0f04 	cmp.w	sl, #4
  40144e:	d1da      	bne.n	401406 <blinkTypes+0xd6>
	ssd1306_clear();
}
  401450:	b009      	add	sp, #36	; 0x24
  401452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401456:	bf00      	nop
  401458:	00401145 	.word	0x00401145
  40145c:	00402274 	.word	0x00402274
  401460:	00401111 	.word	0x00401111
  401464:	0040227c 	.word	0x0040227c
  401468:	00402284 	.word	0x00402284
  40146c:	0040228c 	.word	0x0040228c
  401470:	00402298 	.word	0x00402298
  401474:	004022a4 	.word	0x004022a4
  401478:	004011f9 	.word	0x004011f9
  40147c:	00273ca5 	.word	0x00273ca5
  401480:	20000001 	.word	0x20000001
  401484:	40008000 	.word	0x40008000
  401488:	004003d9 	.word	0x004003d9
  40148c:	00401279 	.word	0x00401279
  401490:	00400fed 	.word	0x00400fed
  401494:	004003ad 	.word	0x004003ad
  401498:	400e1200 	.word	0x400e1200

0040149c <blinkQuantity>:

void blinkQuantity(uint8_t D4, uint8_t D6, uint8_t D8, uint8_t D10, uint8_t D12, uint8_t D20, uint8_t qt1, uint8_t qt2, uint8_t qt3, uint8_t qt4, uint8_t qt5, uint8_t qt6){
  40149c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014a0:	b08b      	sub	sp, #44	; 0x2c
  4014a2:	4682      	mov	sl, r0
  4014a4:	9103      	str	r1, [sp, #12]
  4014a6:	9204      	str	r2, [sp, #16]
  4014a8:	9305      	str	r3, [sp, #20]
  4014aa:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
  4014ae:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
  4014b2:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
  4014b6:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
  4014ba:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  4014be:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
	char num[5];
	quantityScreen();
  4014c2:	4b4a      	ldr	r3, [pc, #296]	; (4015ec <blinkQuantity+0x150>)
  4014c4:	4798      	blx	r3
	standardDisplay(qt1, qt2, qt3, qt4, qt5, qt6);
  4014c6:	9401      	str	r4, [sp, #4]
  4014c8:	9500      	str	r5, [sp, #0]
  4014ca:	463b      	mov	r3, r7
  4014cc:	4642      	mov	r2, r8
  4014ce:	4649      	mov	r1, r9
  4014d0:	4630      	mov	r0, r6
  4014d2:	f8df b138 	ldr.w	fp, [pc, #312]	; 40160c <blinkQuantity+0x170>
  4014d6:	47d8      	blx	fp
	displayAllTypes();
  4014d8:	4b45      	ldr	r3, [pc, #276]	; (4015f0 <blinkQuantity+0x154>)
  4014da:	4798      	blx	r3
	if(D4 == 1){printOLED(0,39,itoa(qt1, num, 10));}
  4014dc:	f1ba 0f01 	cmp.w	sl, #1
  4014e0:	d109      	bne.n	4014f6 <blinkQuantity+0x5a>
  4014e2:	220a      	movs	r2, #10
  4014e4:	a908      	add	r1, sp, #32
  4014e6:	4630      	mov	r0, r6
  4014e8:	4b42      	ldr	r3, [pc, #264]	; (4015f4 <blinkQuantity+0x158>)
  4014ea:	4798      	blx	r3
  4014ec:	4602      	mov	r2, r0
  4014ee:	2127      	movs	r1, #39	; 0x27
  4014f0:	2000      	movs	r0, #0
  4014f2:	4b41      	ldr	r3, [pc, #260]	; (4015f8 <blinkQuantity+0x15c>)
  4014f4:	4798      	blx	r3
	if(D6 == 1){printOLED(1,39,itoa(qt2, num, 10));}
  4014f6:	9b03      	ldr	r3, [sp, #12]
  4014f8:	2b01      	cmp	r3, #1
  4014fa:	d109      	bne.n	401510 <blinkQuantity+0x74>
  4014fc:	220a      	movs	r2, #10
  4014fe:	a908      	add	r1, sp, #32
  401500:	4648      	mov	r0, r9
  401502:	4b3c      	ldr	r3, [pc, #240]	; (4015f4 <blinkQuantity+0x158>)
  401504:	4798      	blx	r3
  401506:	4602      	mov	r2, r0
  401508:	2127      	movs	r1, #39	; 0x27
  40150a:	2001      	movs	r0, #1
  40150c:	4b3a      	ldr	r3, [pc, #232]	; (4015f8 <blinkQuantity+0x15c>)
  40150e:	4798      	blx	r3
	if(D8 == 1){printOLED(2,39,itoa(qt3, num, 10));}
  401510:	9b04      	ldr	r3, [sp, #16]
  401512:	2b01      	cmp	r3, #1
  401514:	d109      	bne.n	40152a <blinkQuantity+0x8e>
  401516:	220a      	movs	r2, #10
  401518:	a908      	add	r1, sp, #32
  40151a:	4640      	mov	r0, r8
  40151c:	4b35      	ldr	r3, [pc, #212]	; (4015f4 <blinkQuantity+0x158>)
  40151e:	4798      	blx	r3
  401520:	4602      	mov	r2, r0
  401522:	2127      	movs	r1, #39	; 0x27
  401524:	2002      	movs	r0, #2
  401526:	4b34      	ldr	r3, [pc, #208]	; (4015f8 <blinkQuantity+0x15c>)
  401528:	4798      	blx	r3
	if(D10 == 1){printOLED(0,100,itoa(qt4, num, 10));}
  40152a:	9b05      	ldr	r3, [sp, #20]
  40152c:	2b01      	cmp	r3, #1
  40152e:	d109      	bne.n	401544 <blinkQuantity+0xa8>
  401530:	220a      	movs	r2, #10
  401532:	a908      	add	r1, sp, #32
  401534:	4638      	mov	r0, r7
  401536:	4b2f      	ldr	r3, [pc, #188]	; (4015f4 <blinkQuantity+0x158>)
  401538:	4798      	blx	r3
  40153a:	4602      	mov	r2, r0
  40153c:	2164      	movs	r1, #100	; 0x64
  40153e:	2000      	movs	r0, #0
  401540:	4b2d      	ldr	r3, [pc, #180]	; (4015f8 <blinkQuantity+0x15c>)
  401542:	4798      	blx	r3
	if(D12 == 1){printOLED(1,100,itoa(qt5, num, 10));}
  401544:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  401548:	2b01      	cmp	r3, #1
  40154a:	d109      	bne.n	401560 <blinkQuantity+0xc4>
  40154c:	220a      	movs	r2, #10
  40154e:	a908      	add	r1, sp, #32
  401550:	4628      	mov	r0, r5
  401552:	4b28      	ldr	r3, [pc, #160]	; (4015f4 <blinkQuantity+0x158>)
  401554:	4798      	blx	r3
  401556:	4602      	mov	r2, r0
  401558:	2164      	movs	r1, #100	; 0x64
  40155a:	2001      	movs	r0, #1
  40155c:	4b26      	ldr	r3, [pc, #152]	; (4015f8 <blinkQuantity+0x15c>)
  40155e:	4798      	blx	r3
	if(D20 == 1){printOLED(2,100,itoa(qt6, num, 10));}
  401560:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  401564:	2b01      	cmp	r3, #1
  401566:	d109      	bne.n	40157c <blinkQuantity+0xe0>
  401568:	220a      	movs	r2, #10
  40156a:	a908      	add	r1, sp, #32
  40156c:	4620      	mov	r0, r4
  40156e:	4b21      	ldr	r3, [pc, #132]	; (4015f4 <blinkQuantity+0x158>)
  401570:	4798      	blx	r3
  401572:	4602      	mov	r2, r0
  401574:	2164      	movs	r1, #100	; 0x64
  401576:	2002      	movs	r0, #2
  401578:	4b1f      	ldr	r3, [pc, #124]	; (4015f8 <blinkQuantity+0x15c>)
  40157a:	4798      	blx	r3
	quantityScreen();
  40157c:	4b1b      	ldr	r3, [pc, #108]	; (4015ec <blinkQuantity+0x150>)
  40157e:	4798      	blx	r3
	delay_ms(300);
  401580:	481e      	ldr	r0, [pc, #120]	; (4015fc <blinkQuantity+0x160>)
  401582:	4b1f      	ldr	r3, [pc, #124]	; (401600 <blinkQuantity+0x164>)
  401584:	4798      	blx	r3
  401586:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40158a:	f8df b084 	ldr.w	fp, [pc, #132]	; 401610 <blinkQuantity+0x174>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  40158e:	4f1d      	ldr	r7, [pc, #116]	; (401604 <blinkQuantity+0x168>)
  401590:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401614 <blinkQuantity+0x178>
  401594:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401618 <blinkQuantity+0x17c>
  401598:	463e      	mov	r6, r7
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40159a:	f00a 0007 	and.w	r0, sl, #7
  40159e:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4015a2:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4015a4:	2010      	movs	r0, #16
  4015a6:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4015a8:	2000      	movs	r0, #0
  4015aa:	47d8      	blx	fp
  4015ac:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4015ae:	ac0a      	add	r4, sp, #40	; 0x28
  4015b0:	2302      	movs	r3, #2
  4015b2:	f844 3d0c 	str.w	r3, [r4, #-12]!
	spi_select_device(SSD1306_SPI, &device);
  4015b6:	4621      	mov	r1, r4
  4015b8:	4630      	mov	r0, r6
  4015ba:	47c8      	blx	r9
  4015bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4015c0:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  4015c4:	2300      	movs	r3, #0
  4015c6:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4015c8:	2056      	movs	r0, #86	; 0x56
  4015ca:	4b0d      	ldr	r3, [pc, #52]	; (401600 <blinkQuantity+0x164>)
  4015cc:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4015ce:	4621      	mov	r1, r4
  4015d0:	4630      	mov	r0, r6
  4015d2:	4b0d      	ldr	r3, [pc, #52]	; (401608 <blinkQuantity+0x16c>)
  4015d4:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  4015d6:	3d01      	subs	r5, #1
  4015d8:	d1e9      	bne.n	4015ae <blinkQuantity+0x112>
  4015da:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  4015de:	f1ba 0f04 	cmp.w	sl, #4
  4015e2:	d1da      	bne.n	40159a <blinkQuantity+0xfe>
	ssd1306_clear();
}
  4015e4:	b00b      	add	sp, #44	; 0x2c
  4015e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015ea:	bf00      	nop
  4015ec:	00401175 	.word	0x00401175
  4015f0:	004011a5 	.word	0x004011a5
  4015f4:	00402001 	.word	0x00402001
  4015f8:	00401111 	.word	0x00401111
  4015fc:	00273ca5 	.word	0x00273ca5
  401600:	20000001 	.word	0x20000001
  401604:	40008000 	.word	0x40008000
  401608:	004003d9 	.word	0x004003d9
  40160c:	00401279 	.word	0x00401279
  401610:	00400fed 	.word	0x00400fed
  401614:	004003ad 	.word	0x004003ad
  401618:	400e1200 	.word	0x400e1200

0040161c <displayAll>:
void displayAll(uint8_t qt1, uint8_t qt2, uint8_t qt3, uint8_t qt4, uint8_t qt5, uint8_t qt6){
  40161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401620:	b089      	sub	sp, #36	; 0x24
  401622:	9002      	str	r0, [sp, #8]
  401624:	9103      	str	r1, [sp, #12]
  401626:	9204      	str	r2, [sp, #16]
  401628:	9305      	str	r3, [sp, #20]
  40162a:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40162e:	f8df b090 	ldr.w	fp, [pc, #144]	; 4016c0 <displayAll+0xa4>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  401632:	4f1e      	ldr	r7, [pc, #120]	; (4016ac <displayAll+0x90>)
  401634:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4016c4 <displayAll+0xa8>
  401638:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4016c8 <displayAll+0xac>
  40163c:	463e      	mov	r6, r7
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40163e:	f00a 0007 	and.w	r0, sl, #7
  401642:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  401646:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  401648:	2010      	movs	r0, #16
  40164a:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  40164c:	2000      	movs	r0, #0
  40164e:	47d8      	blx	fp
  401650:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  401652:	ac08      	add	r4, sp, #32
  401654:	2302      	movs	r3, #2
  401656:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40165a:	4621      	mov	r1, r4
  40165c:	4630      	mov	r0, r6
  40165e:	47c8      	blx	r9
  401660:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401664:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  401668:	2300      	movs	r3, #0
  40166a:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  40166c:	2056      	movs	r0, #86	; 0x56
  40166e:	4b10      	ldr	r3, [pc, #64]	; (4016b0 <displayAll+0x94>)
  401670:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401672:	4621      	mov	r1, r4
  401674:	4630      	mov	r0, r6
  401676:	4b0f      	ldr	r3, [pc, #60]	; (4016b4 <displayAll+0x98>)
  401678:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  40167a:	3d01      	subs	r5, #1
  40167c:	d1e9      	bne.n	401652 <displayAll+0x36>
  40167e:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  401682:	f1ba 0f04 	cmp.w	sl, #4
  401686:	d1da      	bne.n	40163e <displayAll+0x22>
	ssd1306_clear();
	displayAllTypes();
  401688:	4b0b      	ldr	r3, [pc, #44]	; (4016b8 <displayAll+0x9c>)
  40168a:	4798      	blx	r3
	displayAllQty(qt1, qt2, qt3, qt4, qt5, qt6);
  40168c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
  401690:	9301      	str	r3, [sp, #4]
  401692:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
  401696:	9300      	str	r3, [sp, #0]
  401698:	9b05      	ldr	r3, [sp, #20]
  40169a:	9a04      	ldr	r2, [sp, #16]
  40169c:	9903      	ldr	r1, [sp, #12]
  40169e:	9802      	ldr	r0, [sp, #8]
  4016a0:	4c06      	ldr	r4, [pc, #24]	; (4016bc <displayAll+0xa0>)
  4016a2:	47a0      	blx	r4
}
  4016a4:	b009      	add	sp, #36	; 0x24
  4016a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016aa:	bf00      	nop
  4016ac:	40008000 	.word	0x40008000
  4016b0:	20000001 	.word	0x20000001
  4016b4:	004003d9 	.word	0x004003d9
  4016b8:	004011a5 	.word	0x004011a5
  4016bc:	004011f9 	.word	0x004011f9
  4016c0:	00400fed 	.word	0x00400fed
  4016c4:	004003ad 	.word	0x004003ad
  4016c8:	400e1200 	.word	0x400e1200

004016cc <initAll>:
	
	pwm_opts.channel = PWML2_CHANNEL;
	pwm_channel_update_duty( PWM, &pwm_opts, 8);
}

void initAll(void){ //Initializes Channels, Pins, Etc.
  4016cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016d0:	b083      	sub	sp, #12
	sysclk_init();
  4016d2:	4b1d      	ldr	r3, [pc, #116]	; (401748 <initAll+0x7c>)
  4016d4:	4798      	blx	r3
	board_init();
  4016d6:	4b1d      	ldr	r3, [pc, #116]	; (40174c <initAll+0x80>)
  4016d8:	4798      	blx	r3
	ssd1306_init();
  4016da:	4b1d      	ldr	r3, [pc, #116]	; (401750 <initAll+0x84>)
  4016dc:	4798      	blx	r3
  4016de:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4016e2:	f8df b080 	ldr.w	fp, [pc, #128]	; 401764 <initAll+0x98>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4016e6:	4f1b      	ldr	r7, [pc, #108]	; (401754 <initAll+0x88>)
  4016e8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 401768 <initAll+0x9c>
  4016ec:	f8df 807c 	ldr.w	r8, [pc, #124]	; 40176c <initAll+0xa0>
  4016f0:	463e      	mov	r6, r7
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4016f2:	f00a 0007 	and.w	r0, sl, #7
  4016f6:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4016fa:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4016fc:	2010      	movs	r0, #16
  4016fe:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  401700:	2000      	movs	r0, #0
  401702:	47d8      	blx	fp
  401704:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  401706:	ac02      	add	r4, sp, #8
  401708:	2302      	movs	r3, #2
  40170a:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40170e:	4621      	mov	r1, r4
  401710:	4630      	mov	r0, r6
  401712:	47c8      	blx	r9
  401714:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401718:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  40171c:	2300      	movs	r3, #0
  40171e:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  401720:	2056      	movs	r0, #86	; 0x56
  401722:	4b0d      	ldr	r3, [pc, #52]	; (401758 <initAll+0x8c>)
  401724:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401726:	4621      	mov	r1, r4
  401728:	4630      	mov	r0, r6
  40172a:	4b0c      	ldr	r3, [pc, #48]	; (40175c <initAll+0x90>)
  40172c:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  40172e:	3d01      	subs	r5, #1
  401730:	d1e9      	bne.n	401706 <initAll+0x3a>
  401732:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  401736:	f1ba 0f04 	cmp.w	sl, #4
  40173a:	d1da      	bne.n	4016f2 <initAll+0x26>
	ssd1306_clear();
	configure_buttons();
  40173c:	4b08      	ldr	r3, [pc, #32]	; (401760 <initAll+0x94>)
  40173e:	4798      	blx	r3
	
}
  401740:	b003      	add	sp, #12
  401742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401746:	bf00      	nop
  401748:	004005b5 	.word	0x004005b5
  40174c:	00400619 	.word	0x00400619
  401750:	00400171 	.word	0x00400171
  401754:	40008000 	.word	0x40008000
  401758:	20000001 	.word	0x20000001
  40175c:	004003d9 	.word	0x004003d9
  401760:	00401035 	.word	0x00401035
  401764:	00400fed 	.word	0x00400fed
  401768:	004003ad 	.word	0x004003ad
  40176c:	400e1200 	.word	0x400e1200

00401770 <main>:

int main(void){
  401770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401774:	b09d      	sub	sp, #116	; 0x74
	uint8_t type=0,quantitySel=0,i=0,D4=0,D6=0,D8=0,D10=0,D12=0,D20=0;
	
	initAll();
  401776:	4b71      	ldr	r3, [pc, #452]	; (40193c <main+0x1cc>)
  401778:	4798      	blx	r3
	
	pwm_clock_t pwm_clock_opts = {.ul_clka = 10000,.ul_clkb = 0,.ul_mck =  sysclk_get_main_hz()};
  40177a:	f242 7310 	movw	r3, #10000	; 0x2710
  40177e:	9319      	str	r3, [sp, #100]	; 0x64
  401780:	2400      	movs	r4, #0
  401782:	941a      	str	r4, [sp, #104]	; 0x68
  401784:	4b6e      	ldr	r3, [pc, #440]	; (401940 <main+0x1d0>)
  401786:	931b      	str	r3, [sp, #108]	; 0x6c
	pwm_channel_t pwm_opts = {.ul_prescaler = PWM_CMR_CPRE_CLKA,.ul_period	= 200,.ul_duty = 0};
  401788:	2228      	movs	r2, #40	; 0x28
  40178a:	4621      	mov	r1, r4
  40178c:	a80f      	add	r0, sp, #60	; 0x3c
  40178e:	4b6d      	ldr	r3, [pc, #436]	; (401944 <main+0x1d4>)
  401790:	4798      	blx	r3
  401792:	230b      	movs	r3, #11
  401794:	9310      	str	r3, [sp, #64]	; 0x40
  401796:	23c8      	movs	r3, #200	; 0xc8
  401798:	9313      	str	r3, [sp, #76]	; 0x4c
	
	pio_configure_pin(PMWL0, PMWL0_PERIPHERAL);
  40179a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40179e:	2013      	movs	r0, #19
  4017a0:	4d69      	ldr	r5, [pc, #420]	; (401948 <main+0x1d8>)
  4017a2:	47a8      	blx	r5
	pio_configure_pin(PMWL1, PMWL1_PERIPHERAL);
  4017a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4017a8:	2014      	movs	r0, #20
  4017aa:	47a8      	blx	r5
	pio_configure_pin(PMWL2, PMWL2_PERIPHERAL);
  4017ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4017b0:	201e      	movs	r0, #30
  4017b2:	47a8      	blx	r5
	
	pmc_enable_periph_clk(ID_PWM);
  4017b4:	201f      	movs	r0, #31
  4017b6:	4b65      	ldr	r3, [pc, #404]	; (40194c <main+0x1dc>)
  4017b8:	4798      	blx	r3
	
	pwm_channel_disable(PWM, PWML0_CHANNEL);
  4017ba:	4d65      	ldr	r5, [pc, #404]	; (401950 <main+0x1e0>)
  4017bc:	4621      	mov	r1, r4
  4017be:	4628      	mov	r0, r5
  4017c0:	4e64      	ldr	r6, [pc, #400]	; (401954 <main+0x1e4>)
  4017c2:	47b0      	blx	r6
	pwm_channel_disable(PWM, PWML1_CHANNEL);
  4017c4:	2101      	movs	r1, #1
  4017c6:	4628      	mov	r0, r5
  4017c8:	47b0      	blx	r6
	pwm_channel_disable(PWM, PWML2_CHANNEL);
  4017ca:	2102      	movs	r1, #2
  4017cc:	4628      	mov	r0, r5
  4017ce:	47b0      	blx	r6
	
	pwm_init( PWM, &pwm_clock_opts );
  4017d0:	a919      	add	r1, sp, #100	; 0x64
  4017d2:	4628      	mov	r0, r5
  4017d4:	4b60      	ldr	r3, [pc, #384]	; (401958 <main+0x1e8>)
  4017d6:	4798      	blx	r3
	
	pwm_opts.channel = PWML0_CHANNEL;
  4017d8:	940f      	str	r4, [sp, #60]	; 0x3c
	pwm_channel_init(PWM, &pwm_opts);
  4017da:	a90f      	add	r1, sp, #60	; 0x3c
  4017dc:	4628      	mov	r0, r5
  4017de:	f8df 918c 	ldr.w	r9, [pc, #396]	; 40196c <main+0x1fc>
  4017e2:	47c8      	blx	r9
	pwm_channel_enable(PWM, PWML0_CHANNEL);
  4017e4:	4621      	mov	r1, r4
  4017e6:	4628      	mov	r0, r5
  4017e8:	4e5c      	ldr	r6, [pc, #368]	; (40195c <main+0x1ec>)
  4017ea:	47b0      	blx	r6
	
	pwm_opts.channel = PWML1_CHANNEL;
  4017ec:	f04f 0801 	mov.w	r8, #1
  4017f0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	pwm_channel_init(PWM, &pwm_opts);
  4017f4:	a90f      	add	r1, sp, #60	; 0x3c
  4017f6:	4628      	mov	r0, r5
  4017f8:	47c8      	blx	r9
	pwm_channel_enable(PWM, PWML1_CHANNEL);
  4017fa:	4641      	mov	r1, r8
  4017fc:	4628      	mov	r0, r5
  4017fe:	47b0      	blx	r6
	
	pwm_opts.channel = PWML2_CHANNEL;
  401800:	2702      	movs	r7, #2
  401802:	970f      	str	r7, [sp, #60]	; 0x3c
	pwm_channel_init(PWM, &pwm_opts);
  401804:	a90f      	add	r1, sp, #60	; 0x3c
  401806:	4628      	mov	r0, r5
  401808:	47c8      	blx	r9
	pwm_channel_enable(PWM, PWML2_CHANNEL);
  40180a:	4639      	mov	r1, r7
  40180c:	4628      	mov	r0, r5
  40180e:	47b0      	blx	r6
	
	pwm_opts.channel = PWML0_CHANNEL;
  401810:	940f      	str	r4, [sp, #60]	; 0x3c
	pwm_channel_update_duty( PWM, &pwm_opts, 8);
  401812:	2208      	movs	r2, #8
  401814:	a90f      	add	r1, sp, #60	; 0x3c
  401816:	4628      	mov	r0, r5
  401818:	4e51      	ldr	r6, [pc, #324]	; (401960 <main+0x1f0>)
  40181a:	47b0      	blx	r6
	
	pwm_opts.channel = PWML1_CHANNEL;
  40181c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	pwm_channel_update_duty( PWM, &pwm_opts, 8);
  401820:	2208      	movs	r2, #8
  401822:	a90f      	add	r1, sp, #60	; 0x3c
  401824:	4628      	mov	r0, r5
  401826:	47b0      	blx	r6
	
	pwm_opts.channel = PWML2_CHANNEL;
  401828:	970f      	str	r7, [sp, #60]	; 0x3c
	pwm_channel_update_duty( PWM, &pwm_opts, 8);
  40182a:	2208      	movs	r2, #8
  40182c:	a90f      	add	r1, sp, #60	; 0x3c
  40182e:	4628      	mov	r0, r5
  401830:	47b0      	blx	r6
	configure_buttons();
	
}

int main(void){
	uint8_t type=0,quantitySel=0,i=0,D4=0,D6=0,D8=0,D10=0,D12=0,D20=0;
  401832:	46a3      	mov	fp, r4
  401834:	46a2      	mov	sl, r4
  401836:	9408      	str	r4, [sp, #32]
  401838:	9409      	str	r4, [sp, #36]	; 0x24
  40183a:	940a      	str	r4, [sp, #40]	; 0x28
  40183c:	940b      	str	r4, [sp, #44]	; 0x2c
  40183e:	940d      	str	r4, [sp, #52]	; 0x34
  401840:	940c      	str	r4, [sp, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401842:	4f48      	ldr	r7, [pc, #288]	; (401964 <main+0x1f4>)
	
	pwm_opts.channel = PWML2_CHANNEL;
	pwm_channel_update_duty( PWM, &pwm_opts, 8);
	
	while(1){
		if(quantitySel == 0){
  401844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401846:	2b00      	cmp	r3, #0
  401848:	f040 823c 	bne.w	401cc4 <main+0x554>
			if(type==0){blinkTypes(0,1,1,1,1,1,D4,D6,D8,D10,D12,D20);}
  40184c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40184e:	b9a3      	cbnz	r3, 40187a <main+0x10a>
  401850:	f8cd b01c 	str.w	fp, [sp, #28]
  401854:	f8cd a018 	str.w	sl, [sp, #24]
  401858:	9b08      	ldr	r3, [sp, #32]
  40185a:	9305      	str	r3, [sp, #20]
  40185c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40185e:	9304      	str	r3, [sp, #16]
  401860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401862:	9303      	str	r3, [sp, #12]
  401864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401866:	9302      	str	r3, [sp, #8]
  401868:	2101      	movs	r1, #1
  40186a:	9101      	str	r1, [sp, #4]
  40186c:	9100      	str	r1, [sp, #0]
  40186e:	460b      	mov	r3, r1
  401870:	460a      	mov	r2, r1
  401872:	2000      	movs	r0, #0
  401874:	4c3c      	ldr	r4, [pc, #240]	; (401968 <main+0x1f8>)
  401876:	47a0      	blx	r4
  401878:	e02f      	b.n	4018da <main+0x16a>
			if(type==1){blinkTypes(1,0,1,1,1,1,D4,D6,D8,D10,D12,D20);}
  40187a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40187c:	2b01      	cmp	r3, #1
  40187e:	d114      	bne.n	4018aa <main+0x13a>
  401880:	f8cd b01c 	str.w	fp, [sp, #28]
  401884:	f8cd a018 	str.w	sl, [sp, #24]
  401888:	9b08      	ldr	r3, [sp, #32]
  40188a:	9305      	str	r3, [sp, #20]
  40188c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40188e:	9304      	str	r3, [sp, #16]
  401890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401892:	9303      	str	r3, [sp, #12]
  401894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401896:	9302      	str	r3, [sp, #8]
  401898:	2001      	movs	r0, #1
  40189a:	9001      	str	r0, [sp, #4]
  40189c:	9000      	str	r0, [sp, #0]
  40189e:	4603      	mov	r3, r0
  4018a0:	4602      	mov	r2, r0
  4018a2:	2100      	movs	r1, #0
  4018a4:	4c30      	ldr	r4, [pc, #192]	; (401968 <main+0x1f8>)
  4018a6:	47a0      	blx	r4
  4018a8:	e02f      	b.n	40190a <main+0x19a>
			if(type==2){blinkTypes(1,1,0,1,1,1,D4,D6,D8,D10,D12,D20);}
  4018aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4018ac:	2b02      	cmp	r3, #2
  4018ae:	d114      	bne.n	4018da <main+0x16a>
  4018b0:	f8cd b01c 	str.w	fp, [sp, #28]
  4018b4:	f8cd a018 	str.w	sl, [sp, #24]
  4018b8:	9b08      	ldr	r3, [sp, #32]
  4018ba:	9305      	str	r3, [sp, #20]
  4018bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4018be:	9304      	str	r3, [sp, #16]
  4018c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4018c2:	9303      	str	r3, [sp, #12]
  4018c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4018c6:	9302      	str	r3, [sp, #8]
  4018c8:	2001      	movs	r0, #1
  4018ca:	9001      	str	r0, [sp, #4]
  4018cc:	9000      	str	r0, [sp, #0]
  4018ce:	4603      	mov	r3, r0
  4018d0:	2200      	movs	r2, #0
  4018d2:	4601      	mov	r1, r0
  4018d4:	4c24      	ldr	r4, [pc, #144]	; (401968 <main+0x1f8>)
  4018d6:	47a0      	blx	r4
  4018d8:	e04a      	b.n	401970 <main+0x200>
			if(type==3){blinkTypes(1,1,1,0,1,1,D4,D6,D8,D10,D12,D20);}
  4018da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4018dc:	2b03      	cmp	r3, #3
  4018de:	d114      	bne.n	40190a <main+0x19a>
  4018e0:	f8cd b01c 	str.w	fp, [sp, #28]
  4018e4:	f8cd a018 	str.w	sl, [sp, #24]
  4018e8:	9b08      	ldr	r3, [sp, #32]
  4018ea:	9305      	str	r3, [sp, #20]
  4018ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4018ee:	9304      	str	r3, [sp, #16]
  4018f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4018f2:	9303      	str	r3, [sp, #12]
  4018f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4018f6:	9302      	str	r3, [sp, #8]
  4018f8:	2001      	movs	r0, #1
  4018fa:	9001      	str	r0, [sp, #4]
  4018fc:	9000      	str	r0, [sp, #0]
  4018fe:	2300      	movs	r3, #0
  401900:	4602      	mov	r2, r0
  401902:	4601      	mov	r1, r0
  401904:	4c18      	ldr	r4, [pc, #96]	; (401968 <main+0x1f8>)
  401906:	47a0      	blx	r4
  401908:	e04a      	b.n	4019a0 <main+0x230>
			if(type==4){blinkTypes(1,1,1,1,0,1,D4,D6,D8,D10,D12,D20);}
  40190a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40190c:	2b04      	cmp	r3, #4
  40190e:	d12f      	bne.n	401970 <main+0x200>
  401910:	f8cd b01c 	str.w	fp, [sp, #28]
  401914:	f8cd a018 	str.w	sl, [sp, #24]
  401918:	9b08      	ldr	r3, [sp, #32]
  40191a:	9305      	str	r3, [sp, #20]
  40191c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40191e:	9304      	str	r3, [sp, #16]
  401920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401922:	9303      	str	r3, [sp, #12]
  401924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401926:	9302      	str	r3, [sp, #8]
  401928:	2001      	movs	r0, #1
  40192a:	9001      	str	r0, [sp, #4]
  40192c:	2300      	movs	r3, #0
  40192e:	9300      	str	r3, [sp, #0]
  401930:	4603      	mov	r3, r0
  401932:	4602      	mov	r2, r0
  401934:	4601      	mov	r1, r0
  401936:	4c0c      	ldr	r4, [pc, #48]	; (401968 <main+0x1f8>)
  401938:	47a0      	blx	r4
  40193a:	e031      	b.n	4019a0 <main+0x230>
  40193c:	004016cd 	.word	0x004016cd
  401940:	0e4e1c00 	.word	0x0e4e1c00
  401944:	00402005 	.word	0x00402005
  401948:	00400849 	.word	0x00400849
  40194c:	00400bbd 	.word	0x00400bbd
  401950:	40020000 	.word	0x40020000
  401954:	004005a9 	.word	0x004005a9
  401958:	0040044d 	.word	0x0040044d
  40195c:	0040059d 	.word	0x0040059d
  401960:	00400581 	.word	0x00400581
  401964:	400e1200 	.word	0x400e1200
  401968:	00401331 	.word	0x00401331
  40196c:	00400499 	.word	0x00400499
			if(type==5){blinkTypes(1,1,1,1,1,0,D4,D6,D8,D10,D12,D20);}
  401970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401972:	2b05      	cmp	r3, #5
  401974:	d114      	bne.n	4019a0 <main+0x230>
  401976:	f8cd b01c 	str.w	fp, [sp, #28]
  40197a:	f8cd a018 	str.w	sl, [sp, #24]
  40197e:	9b08      	ldr	r3, [sp, #32]
  401980:	9305      	str	r3, [sp, #20]
  401982:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401984:	9304      	str	r3, [sp, #16]
  401986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401988:	9303      	str	r3, [sp, #12]
  40198a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40198c:	9302      	str	r3, [sp, #8]
  40198e:	2300      	movs	r3, #0
  401990:	9301      	str	r3, [sp, #4]
  401992:	2001      	movs	r0, #1
  401994:	9000      	str	r0, [sp, #0]
  401996:	4603      	mov	r3, r0
  401998:	4602      	mov	r2, r0
  40199a:	4601      	mov	r1, r0
  40199c:	4cb2      	ldr	r4, [pc, #712]	; (401c68 <main+0x4f8>)
  40199e:	47a0      	blx	r4
  4019a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
				
			if(ioport_get_pin_level(LED1)==0){
  4019a2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4019a6:	d109      	bne.n	4019bc <main+0x24c>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  4019ac:	633b      	str	r3, [r7, #48]	; 0x30
				ioport_set_pin_level( LED1, 1);
				type++;
  4019ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4019b0:	3301      	adds	r3, #1
  4019b2:	b2db      	uxtb	r3, r3
				if(type==6){type=0;}	
  4019b4:	2b06      	cmp	r3, #6
  4019b6:	bf08      	it	eq
  4019b8:	2300      	moveq	r3, #0
  4019ba:	930c      	str	r3, [sp, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4019bc:	4bab      	ldr	r3, [pc, #684]	; (401c6c <main+0x4fc>)
  4019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			}
				
			if(ioport_get_pin_level(LED2)==0){
  4019c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4019c4:	d138      	bne.n	401a38 <main+0x2c8>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  4019ca:	4aa8      	ldr	r2, [pc, #672]	; (401c6c <main+0x4fc>)
  4019cc:	6313      	str	r3, [r2, #48]	; 0x30
  4019ce:	2300      	movs	r3, #0
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4019d0:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 401c88 <main+0x518>
  4019d4:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 401c8c <main+0x51c>
  4019d8:	4646      	mov	r6, r8
  4019da:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  4019de:	469a      	mov	sl, r3
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4019e0:	f00a 0007 	and.w	r0, sl, #7
  4019e4:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4019e8:	4ba1      	ldr	r3, [pc, #644]	; (401c70 <main+0x500>)
  4019ea:	4798      	blx	r3
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4019ec:	2010      	movs	r0, #16
  4019ee:	4ba0      	ldr	r3, [pc, #640]	; (401c70 <main+0x500>)
  4019f0:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4019f2:	2000      	movs	r0, #0
  4019f4:	4b9e      	ldr	r3, [pc, #632]	; (401c70 <main+0x500>)
  4019f6:	4798      	blx	r3
  4019f8:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4019fa:	ac1c      	add	r4, sp, #112	; 0x70
  4019fc:	2302      	movs	r3, #2
  4019fe:	f844 3d38 	str.w	r3, [r4, #-56]!
	spi_select_device(SSD1306_SPI, &device);
  401a02:	4621      	mov	r1, r4
  401a04:	4630      	mov	r0, r6
  401a06:	47c8      	blx	r9
  401a08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401a0c:	633b      	str	r3, [r7, #48]	; 0x30
  401a0e:	2300      	movs	r3, #0
  401a10:	f8c8 300c 	str.w	r3, [r8, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  401a14:	2056      	movs	r0, #86	; 0x56
  401a16:	4b97      	ldr	r3, [pc, #604]	; (401c74 <main+0x504>)
  401a18:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401a1a:	4621      	mov	r1, r4
  401a1c:	4630      	mov	r0, r6
  401a1e:	4b96      	ldr	r3, [pc, #600]	; (401c78 <main+0x508>)
  401a20:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  401a22:	3d01      	subs	r5, #1
  401a24:	d1e9      	bne.n	4019fa <main+0x28a>
  401a26:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  401a2a:	f1ba 0f04 	cmp.w	sl, #4
  401a2e:	d1d7      	bne.n	4019e0 <main+0x270>
  401a30:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
				ioport_set_pin_level( LED2, 1);
				ssd1306_clear();
				quantitySel = 1;
  401a34:	2301      	movs	r3, #1
  401a36:	930d      	str	r3, [sp, #52]	; 0x34
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
			}
			if(ioport_get_pin_level(LED3)==0){
  401a3a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  401a3e:	f040 8141 	bne.w	401cc4 <main+0x554>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401a46:	633b      	str	r3, [r7, #48]	; 0x30
				
				ioport_set_pin_level( LED3, 1);
				displayAll(D4,D6,D8,D10,D12,D20);
  401a48:	f8cd b004 	str.w	fp, [sp, #4]
  401a4c:	f8cd a000 	str.w	sl, [sp]
  401a50:	9b08      	ldr	r3, [sp, #32]
  401a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401a54:	990a      	ldr	r1, [sp, #40]	; 0x28
  401a56:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  401a58:	4628      	mov	r0, r5
  401a5a:	4c88      	ldr	r4, [pc, #544]	; (401c7c <main+0x50c>)
  401a5c:	47a0      	blx	r4
				
				for(i=D4;i > 0;i--){
  401a5e:	b355      	cbz	r5, 401ab6 <main+0x346>
					
					pwm_opts.channel = PWML0_CHANNEL;
					pwm_channel_update_duty(PWM, &pwm_opts, 3);
  401a60:	f8df 922c 	ldr.w	r9, [pc, #556]	; 401c90 <main+0x520>
  401a64:	462c      	mov	r4, r5
  401a66:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
				ioport_set_pin_level( LED3, 1);
				displayAll(D4,D6,D8,D10,D12,D20);
				
				for(i=D4;i > 0;i--){
					
					pwm_opts.channel = PWML0_CHANNEL;
  401a6a:	f04f 0a00 	mov.w	sl, #0
  401a6e:	ad1c      	add	r5, sp, #112	; 0x70
  401a70:	f845 ad34 	str.w	sl, [r5, #-52]!
					pwm_channel_update_duty(PWM, &pwm_opts, 3);
  401a74:	2203      	movs	r2, #3
  401a76:	4629      	mov	r1, r5
  401a78:	4648      	mov	r0, r9
  401a7a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 401c94 <main+0x524>
  401a7e:	47c0      	blx	r8
					delay_ms(1000);
  401a80:	487f      	ldr	r0, [pc, #508]	; (401c80 <main+0x510>)
  401a82:	4e7c      	ldr	r6, [pc, #496]	; (401c74 <main+0x504>)
  401a84:	47b0      	blx	r6
	
					pwm_opts.channel = PWML0_CHANNEL; 
  401a86:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
					pwm_channel_update_duty(PWM, &pwm_opts, 7.9);
  401a8a:	2207      	movs	r2, #7
  401a8c:	4629      	mov	r1, r5
  401a8e:	4648      	mov	r0, r9
  401a90:	47c0      	blx	r8
					delay_ms(1200);
  401a92:	487c      	ldr	r0, [pc, #496]	; (401c84 <main+0x514>)
  401a94:	47b0      	blx	r6
					D4--;
  401a96:	3c01      	subs	r4, #1
  401a98:	b2e4      	uxtb	r4, r4
					
					displayAll(D4,D6,D8,D10,D12,D20);
  401a9a:	f8cd b004 	str.w	fp, [sp, #4]
  401a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401aa0:	9300      	str	r3, [sp, #0]
  401aa2:	9b08      	ldr	r3, [sp, #32]
  401aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
  401aa8:	4620      	mov	r0, r4
  401aaa:	4d74      	ldr	r5, [pc, #464]	; (401c7c <main+0x50c>)
  401aac:	47a8      	blx	r5
			if(ioport_get_pin_level(LED3)==0){
				
				ioport_set_pin_level( LED3, 1);
				displayAll(D4,D6,D8,D10,D12,D20);
				
				for(i=D4;i > 0;i--){
  401aae:	2c00      	cmp	r4, #0
  401ab0:	d1db      	bne.n	401a6a <main+0x2fa>
  401ab2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
					D4--;
					
					displayAll(D4,D6,D8,D10,D12,D20);
				}
					
				for(i=D6;i > 0;i--){
  401ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401ab8:	b34b      	cbz	r3, 401b0e <main+0x39e>
					
					pwm_opts.channel = PWML0_CHANNEL;
					pwm_channel_update_duty(PWM, &pwm_opts, 13);
  401aba:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 401c90 <main+0x520>
  401abe:	461c      	mov	r4, r3
  401ac0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
					displayAll(D4,D6,D8,D10,D12,D20);
				}
					
				for(i=D6;i > 0;i--){
					
					pwm_opts.channel = PWML0_CHANNEL;
  401ac4:	2600      	movs	r6, #0
  401ac6:	ad1c      	add	r5, sp, #112	; 0x70
  401ac8:	f845 6d34 	str.w	r6, [r5, #-52]!
					pwm_channel_update_duty(PWM, &pwm_opts, 13);
  401acc:	220d      	movs	r2, #13
  401ace:	4629      	mov	r1, r5
  401ad0:	4648      	mov	r0, r9
  401ad2:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 401c94 <main+0x524>
  401ad6:	47d0      	blx	sl
					delay_ms(1000);
  401ad8:	4869      	ldr	r0, [pc, #420]	; (401c80 <main+0x510>)
  401ada:	f8df 8198 	ldr.w	r8, [pc, #408]	; 401c74 <main+0x504>
  401ade:	47c0      	blx	r8
	
					pwm_opts.channel = PWML0_CHANNEL; 
  401ae0:	960f      	str	r6, [sp, #60]	; 0x3c
					pwm_channel_update_duty(PWM, &pwm_opts, 7.90);
  401ae2:	2207      	movs	r2, #7
  401ae4:	4629      	mov	r1, r5
  401ae6:	4648      	mov	r0, r9
  401ae8:	47d0      	blx	sl
					delay_ms(1200);
  401aea:	4866      	ldr	r0, [pc, #408]	; (401c84 <main+0x514>)
  401aec:	47c0      	blx	r8
					D6--;
  401aee:	3c01      	subs	r4, #1
  401af0:	b2e4      	uxtb	r4, r4
					
					displayAll(D4,D6,D8,D10,D12,D20);
  401af2:	f8cd b004 	str.w	fp, [sp, #4]
  401af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401af8:	9300      	str	r3, [sp, #0]
  401afa:	9b08      	ldr	r3, [sp, #32]
  401afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401afe:	4621      	mov	r1, r4
  401b00:	4630      	mov	r0, r6
  401b02:	4d5e      	ldr	r5, [pc, #376]	; (401c7c <main+0x50c>)
  401b04:	47a8      	blx	r5
					D4--;
					
					displayAll(D4,D6,D8,D10,D12,D20);
				}
					
				for(i=D6;i > 0;i--){
  401b06:	2c00      	cmp	r4, #0
  401b08:	d1dc      	bne.n	401ac4 <main+0x354>
  401b0a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
					D6--;
					
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D8;i > 0;i--){
  401b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401b10:	b353      	cbz	r3, 401b68 <main+0x3f8>
					
					pwm_opts.channel = PWML1_CHANNEL;
					pwm_channel_update_duty(PWM, &pwm_opts, 3);
  401b12:	f8df 917c 	ldr.w	r9, [pc, #380]	; 401c90 <main+0x520>
  401b16:	f8df 817c 	ldr.w	r8, [pc, #380]	; 401c94 <main+0x524>
  401b1a:	461c      	mov	r4, r3
  401b1c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D8;i > 0;i--){
					
					pwm_opts.channel = PWML1_CHANNEL;
  401b20:	f04f 0a01 	mov.w	sl, #1
  401b24:	ad1c      	add	r5, sp, #112	; 0x70
  401b26:	f845 ad34 	str.w	sl, [r5, #-52]!
					pwm_channel_update_duty(PWM, &pwm_opts, 3);
  401b2a:	2203      	movs	r2, #3
  401b2c:	4629      	mov	r1, r5
  401b2e:	4648      	mov	r0, r9
  401b30:	47c0      	blx	r8
					delay_ms(1000);
  401b32:	4853      	ldr	r0, [pc, #332]	; (401c80 <main+0x510>)
  401b34:	4e4f      	ldr	r6, [pc, #316]	; (401c74 <main+0x504>)
  401b36:	47b0      	blx	r6
	
					pwm_opts.channel = PWML1_CHANNEL; 
  401b38:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
					pwm_channel_update_duty(PWM, &pwm_opts, 8);
  401b3c:	2208      	movs	r2, #8
  401b3e:	4629      	mov	r1, r5
  401b40:	4648      	mov	r0, r9
  401b42:	47c0      	blx	r8
					delay_ms(1000);
  401b44:	484e      	ldr	r0, [pc, #312]	; (401c80 <main+0x510>)
  401b46:	47b0      	blx	r6
					D8--;
  401b48:	3c01      	subs	r4, #1
  401b4a:	b2e4      	uxtb	r4, r4
					
					displayAll(D4,D6,D8,D10,D12,D20);
  401b4c:	f8cd b004 	str.w	fp, [sp, #4]
  401b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401b52:	9300      	str	r3, [sp, #0]
  401b54:	9b08      	ldr	r3, [sp, #32]
  401b56:	4622      	mov	r2, r4
  401b58:	2100      	movs	r1, #0
  401b5a:	4608      	mov	r0, r1
  401b5c:	4d47      	ldr	r5, [pc, #284]	; (401c7c <main+0x50c>)
  401b5e:	47a8      	blx	r5
					D6--;
					
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D8;i > 0;i--){
  401b60:	2c00      	cmp	r4, #0
  401b62:	d1dd      	bne.n	401b20 <main+0x3b0>
  401b64:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
					D8--;
					
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D10;i > 0;i--){
  401b68:	9b08      	ldr	r3, [sp, #32]
  401b6a:	b353      	cbz	r3, 401bc2 <main+0x452>
					
					pwm_opts.channel = PWML1_CHANNEL;
					pwm_channel_update_duty(PWM, &pwm_opts, 13);
  401b6c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 401c90 <main+0x520>
  401b70:	f8df 8120 	ldr.w	r8, [pc, #288]	; 401c94 <main+0x524>
  401b74:	461c      	mov	r4, r3
  401b76:	f8cd a020 	str.w	sl, [sp, #32]
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D10;i > 0;i--){
					
					pwm_opts.channel = PWML1_CHANNEL;
  401b7a:	f04f 0a01 	mov.w	sl, #1
  401b7e:	ad1c      	add	r5, sp, #112	; 0x70
  401b80:	f845 ad34 	str.w	sl, [r5, #-52]!
					pwm_channel_update_duty(PWM, &pwm_opts, 13);
  401b84:	220d      	movs	r2, #13
  401b86:	4629      	mov	r1, r5
  401b88:	4648      	mov	r0, r9
  401b8a:	47c0      	blx	r8
					delay_ms(1000);
  401b8c:	483c      	ldr	r0, [pc, #240]	; (401c80 <main+0x510>)
  401b8e:	4e39      	ldr	r6, [pc, #228]	; (401c74 <main+0x504>)
  401b90:	47b0      	blx	r6
	
					pwm_opts.channel = PWML1_CHANNEL; 
  401b92:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
					pwm_channel_update_duty(PWM, &pwm_opts, 8);
  401b96:	2208      	movs	r2, #8
  401b98:	4629      	mov	r1, r5
  401b9a:	4648      	mov	r0, r9
  401b9c:	47c0      	blx	r8
					delay_ms(1000);
  401b9e:	4838      	ldr	r0, [pc, #224]	; (401c80 <main+0x510>)
  401ba0:	47b0      	blx	r6
					D10--;
  401ba2:	3c01      	subs	r4, #1
  401ba4:	b2e4      	uxtb	r4, r4
					
					displayAll(D4,D6,D8,D10,D12,D20);
  401ba6:	f8cd b004 	str.w	fp, [sp, #4]
  401baa:	9b08      	ldr	r3, [sp, #32]
  401bac:	9300      	str	r3, [sp, #0]
  401bae:	4623      	mov	r3, r4
  401bb0:	2200      	movs	r2, #0
  401bb2:	4611      	mov	r1, r2
  401bb4:	4610      	mov	r0, r2
  401bb6:	4d31      	ldr	r5, [pc, #196]	; (401c7c <main+0x50c>)
  401bb8:	47a8      	blx	r5
					D8--;
					
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D10;i > 0;i--){
  401bba:	2c00      	cmp	r4, #0
  401bbc:	d1dd      	bne.n	401b7a <main+0x40a>
  401bbe:	f8dd a020 	ldr.w	sl, [sp, #32]
					D10--;
					
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D12;i > 0;i--){
  401bc2:	f1ba 0f00 	cmp.w	sl, #0
  401bc6:	d025      	beq.n	401c14 <main+0x4a4>
					
					pwm_opts.channel = PWML2_CHANNEL;
					pwm_channel_update_duty(PWM, &pwm_opts, 3);
  401bc8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 401c90 <main+0x520>
  401bcc:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 401c94 <main+0x524>
  401bd0:	4654      	mov	r4, sl
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D12;i > 0;i--){
					
					pwm_opts.channel = PWML2_CHANNEL;
  401bd2:	f04f 0a02 	mov.w	sl, #2
  401bd6:	ad1c      	add	r5, sp, #112	; 0x70
  401bd8:	f845 ad34 	str.w	sl, [r5, #-52]!
					pwm_channel_update_duty(PWM, &pwm_opts, 3);
  401bdc:	2203      	movs	r2, #3
  401bde:	4629      	mov	r1, r5
  401be0:	4648      	mov	r0, r9
  401be2:	47c0      	blx	r8
					delay_ms(1000);
  401be4:	4826      	ldr	r0, [pc, #152]	; (401c80 <main+0x510>)
  401be6:	4e23      	ldr	r6, [pc, #140]	; (401c74 <main+0x504>)
  401be8:	47b0      	blx	r6
	
					pwm_opts.channel = PWML2_CHANNEL; 
  401bea:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
					pwm_channel_update_duty(PWM, &pwm_opts, 8);
  401bee:	2208      	movs	r2, #8
  401bf0:	4629      	mov	r1, r5
  401bf2:	4648      	mov	r0, r9
  401bf4:	47c0      	blx	r8
					delay_ms(1000);
  401bf6:	4822      	ldr	r0, [pc, #136]	; (401c80 <main+0x510>)
  401bf8:	47b0      	blx	r6
					D12--;
  401bfa:	3c01      	subs	r4, #1
  401bfc:	b2e4      	uxtb	r4, r4
					
					displayAll(D4,D6,D8,D10,D12,D20);
  401bfe:	f8cd b004 	str.w	fp, [sp, #4]
  401c02:	9400      	str	r4, [sp, #0]
  401c04:	2300      	movs	r3, #0
  401c06:	461a      	mov	r2, r3
  401c08:	4619      	mov	r1, r3
  401c0a:	4618      	mov	r0, r3
  401c0c:	4d1b      	ldr	r5, [pc, #108]	; (401c7c <main+0x50c>)
  401c0e:	47a8      	blx	r5
					D10--;
					
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D12;i > 0;i--){
  401c10:	2c00      	cmp	r4, #0
  401c12:	d1de      	bne.n	401bd2 <main+0x462>
					D12--;
					
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D20;i > 0;i--){
  401c14:	f1bb 0f00 	cmp.w	fp, #0
  401c18:	d04a      	beq.n	401cb0 <main+0x540>
					
					pwm_opts.channel = PWML2_CHANNEL;
					pwm_channel_update_duty(PWM, &pwm_opts, 13);
  401c1a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 401c90 <main+0x520>
  401c1e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 401c94 <main+0x524>
  401c22:	465c      	mov	r4, fp
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D20;i > 0;i--){
					
					pwm_opts.channel = PWML2_CHANNEL;
  401c24:	f04f 0a02 	mov.w	sl, #2
  401c28:	ad1c      	add	r5, sp, #112	; 0x70
  401c2a:	f845 ad34 	str.w	sl, [r5, #-52]!
					pwm_channel_update_duty(PWM, &pwm_opts, 13);
  401c2e:	220d      	movs	r2, #13
  401c30:	4629      	mov	r1, r5
  401c32:	4648      	mov	r0, r9
  401c34:	47c0      	blx	r8
					delay_ms(1000);
  401c36:	4812      	ldr	r0, [pc, #72]	; (401c80 <main+0x510>)
  401c38:	4e0e      	ldr	r6, [pc, #56]	; (401c74 <main+0x504>)
  401c3a:	47b0      	blx	r6
	
					pwm_opts.channel = PWML2_CHANNEL; 
  401c3c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
					pwm_channel_update_duty(PWM, &pwm_opts, 8);
  401c40:	2208      	movs	r2, #8
  401c42:	4629      	mov	r1, r5
  401c44:	4648      	mov	r0, r9
  401c46:	47c0      	blx	r8
					delay_ms(1000);
  401c48:	480d      	ldr	r0, [pc, #52]	; (401c80 <main+0x510>)
  401c4a:	47b0      	blx	r6
					D20--;
  401c4c:	3c01      	subs	r4, #1
  401c4e:	b2e4      	uxtb	r4, r4
					
					displayAll(D4,D6,D8,D10,D12,D20);
  401c50:	9401      	str	r4, [sp, #4]
  401c52:	2000      	movs	r0, #0
  401c54:	9000      	str	r0, [sp, #0]
  401c56:	4603      	mov	r3, r0
  401c58:	4602      	mov	r2, r0
  401c5a:	4601      	mov	r1, r0
  401c5c:	4d07      	ldr	r5, [pc, #28]	; (401c7c <main+0x50c>)
  401c5e:	47a8      	blx	r5
					D12--;
					
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
				
				for(i=D20;i > 0;i--){
  401c60:	2c00      	cmp	r4, #0
  401c62:	d1df      	bne.n	401c24 <main+0x4b4>
  401c64:	e018      	b.n	401c98 <main+0x528>
  401c66:	bf00      	nop
  401c68:	00401331 	.word	0x00401331
  401c6c:	400e0e00 	.word	0x400e0e00
  401c70:	00400fed 	.word	0x00400fed
  401c74:	20000001 	.word	0x20000001
  401c78:	004003d9 	.word	0x004003d9
  401c7c:	0040161d 	.word	0x0040161d
  401c80:	0082ca25 	.word	0x0082ca25
  401c84:	009cf293 	.word	0x009cf293
  401c88:	40008000 	.word	0x40008000
  401c8c:	004003ad 	.word	0x004003ad
  401c90:	40020000 	.word	0x40020000
  401c94:	00400581 	.word	0x00400581
  401c98:	46a3      	mov	fp, r4
  401c9a:	f04f 0a00 	mov.w	sl, #0
  401c9e:	f8cd a020 	str.w	sl, [sp, #32]
  401ca2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  401ca6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  401caa:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  401cae:	e009      	b.n	401cc4 <main+0x554>
  401cb0:	f04f 0a00 	mov.w	sl, #0
  401cb4:	f8cd a020 	str.w	sl, [sp, #32]
  401cb8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  401cbc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  401cc0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
					
					displayAll(D4,D6,D8,D10,D12,D20);
				}	
			}
		}
		if(quantitySel == 1){
  401cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401cc6:	2b00      	cmp	r3, #0
  401cc8:	f43f adbc 	beq.w	401844 <main+0xd4>
			
			if(type==0){blinkQuantity(0,1,1,1,1,1,D4,D6,D8,D10,D12,D20);}
  401ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401cce:	b9a3      	cbnz	r3, 401cfa <main+0x58a>
  401cd0:	f8cd b01c 	str.w	fp, [sp, #28]
  401cd4:	f8cd a018 	str.w	sl, [sp, #24]
  401cd8:	9b08      	ldr	r3, [sp, #32]
  401cda:	9305      	str	r3, [sp, #20]
  401cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401cde:	9304      	str	r3, [sp, #16]
  401ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401ce2:	9303      	str	r3, [sp, #12]
  401ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401ce6:	9302      	str	r3, [sp, #8]
  401ce8:	2101      	movs	r1, #1
  401cea:	9101      	str	r1, [sp, #4]
  401cec:	9100      	str	r1, [sp, #0]
  401cee:	460b      	mov	r3, r1
  401cf0:	460a      	mov	r2, r1
  401cf2:	2000      	movs	r0, #0
  401cf4:	4c9b      	ldr	r4, [pc, #620]	; (401f64 <main+0x7f4>)
  401cf6:	47a0      	blx	r4
  401cf8:	e02f      	b.n	401d5a <main+0x5ea>
			if(type==1){blinkQuantity(1,0,1,1,1,1,D4,D6,D8,D10,D12,D20);}
  401cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401cfc:	2b01      	cmp	r3, #1
  401cfe:	d114      	bne.n	401d2a <main+0x5ba>
  401d00:	f8cd b01c 	str.w	fp, [sp, #28]
  401d04:	f8cd a018 	str.w	sl, [sp, #24]
  401d08:	9b08      	ldr	r3, [sp, #32]
  401d0a:	9305      	str	r3, [sp, #20]
  401d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d0e:	9304      	str	r3, [sp, #16]
  401d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401d12:	9303      	str	r3, [sp, #12]
  401d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401d16:	9302      	str	r3, [sp, #8]
  401d18:	2001      	movs	r0, #1
  401d1a:	9001      	str	r0, [sp, #4]
  401d1c:	9000      	str	r0, [sp, #0]
  401d1e:	4603      	mov	r3, r0
  401d20:	4602      	mov	r2, r0
  401d22:	2100      	movs	r1, #0
  401d24:	4c8f      	ldr	r4, [pc, #572]	; (401f64 <main+0x7f4>)
  401d26:	47a0      	blx	r4
  401d28:	e02f      	b.n	401d8a <main+0x61a>
			if(type==2){blinkQuantity(1,1,0,1,1,1,D4,D6,D8,D10,D12,D20);}
  401d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401d2c:	2b02      	cmp	r3, #2
  401d2e:	d114      	bne.n	401d5a <main+0x5ea>
  401d30:	f8cd b01c 	str.w	fp, [sp, #28]
  401d34:	f8cd a018 	str.w	sl, [sp, #24]
  401d38:	9b08      	ldr	r3, [sp, #32]
  401d3a:	9305      	str	r3, [sp, #20]
  401d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d3e:	9304      	str	r3, [sp, #16]
  401d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401d42:	9303      	str	r3, [sp, #12]
  401d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401d46:	9302      	str	r3, [sp, #8]
  401d48:	2001      	movs	r0, #1
  401d4a:	9001      	str	r0, [sp, #4]
  401d4c:	9000      	str	r0, [sp, #0]
  401d4e:	4603      	mov	r3, r0
  401d50:	2200      	movs	r2, #0
  401d52:	4601      	mov	r1, r0
  401d54:	4c83      	ldr	r4, [pc, #524]	; (401f64 <main+0x7f4>)
  401d56:	47a0      	blx	r4
  401d58:	e034      	b.n	401dc4 <main+0x654>
			if(type==3){blinkQuantity(1,1,1,0,1,1,D4,D6,D8,D10,D12,D20);}
  401d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401d5c:	2b03      	cmp	r3, #3
  401d5e:	d114      	bne.n	401d8a <main+0x61a>
  401d60:	f8cd b01c 	str.w	fp, [sp, #28]
  401d64:	f8cd a018 	str.w	sl, [sp, #24]
  401d68:	9b08      	ldr	r3, [sp, #32]
  401d6a:	9305      	str	r3, [sp, #20]
  401d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d6e:	9304      	str	r3, [sp, #16]
  401d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401d72:	9303      	str	r3, [sp, #12]
  401d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401d76:	9302      	str	r3, [sp, #8]
  401d78:	2001      	movs	r0, #1
  401d7a:	9001      	str	r0, [sp, #4]
  401d7c:	9000      	str	r0, [sp, #0]
  401d7e:	2300      	movs	r3, #0
  401d80:	4602      	mov	r2, r0
  401d82:	4601      	mov	r1, r0
  401d84:	4c77      	ldr	r4, [pc, #476]	; (401f64 <main+0x7f4>)
  401d86:	47a0      	blx	r4
  401d88:	e039      	b.n	401dfe <main+0x68e>
			if(type==4){blinkQuantity(1,1,1,1,0,1,D4,D6,D8,D10,D12,D20);}
  401d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401d8c:	2b04      	cmp	r3, #4
  401d8e:	d119      	bne.n	401dc4 <main+0x654>
  401d90:	f8cd b01c 	str.w	fp, [sp, #28]
  401d94:	f8cd a018 	str.w	sl, [sp, #24]
  401d98:	9b08      	ldr	r3, [sp, #32]
  401d9a:	9305      	str	r3, [sp, #20]
  401d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d9e:	9304      	str	r3, [sp, #16]
  401da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401da2:	9303      	str	r3, [sp, #12]
  401da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401da6:	9302      	str	r3, [sp, #8]
  401da8:	2001      	movs	r0, #1
  401daa:	9001      	str	r0, [sp, #4]
  401dac:	2300      	movs	r3, #0
  401dae:	9300      	str	r3, [sp, #0]
  401db0:	4603      	mov	r3, r0
  401db2:	4602      	mov	r2, r0
  401db4:	4601      	mov	r1, r0
  401db6:	4c6b      	ldr	r4, [pc, #428]	; (401f64 <main+0x7f4>)
  401db8:	47a0      	blx	r4
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
			if(type==5){blinkQuantity(1,1,1,1,1,0,D4,D6,D8,D10,D12,D20);}
				
			if(ioport_get_pin_level(LED1)==0){
  401dbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401dc0:	d152      	bne.n	401e68 <main+0x6f8>
  401dc2:	e0cb      	b.n	401f5c <main+0x7ec>
			if(type==0){blinkQuantity(0,1,1,1,1,1,D4,D6,D8,D10,D12,D20);}
			if(type==1){blinkQuantity(1,0,1,1,1,1,D4,D6,D8,D10,D12,D20);}
			if(type==2){blinkQuantity(1,1,0,1,1,1,D4,D6,D8,D10,D12,D20);}
			if(type==3){blinkQuantity(1,1,1,0,1,1,D4,D6,D8,D10,D12,D20);}
			if(type==4){blinkQuantity(1,1,1,1,0,1,D4,D6,D8,D10,D12,D20);}
			if(type==5){blinkQuantity(1,1,1,1,1,0,D4,D6,D8,D10,D12,D20);}
  401dc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401dc6:	2b05      	cmp	r3, #5
  401dc8:	d119      	bne.n	401dfe <main+0x68e>
  401dca:	f8cd b01c 	str.w	fp, [sp, #28]
  401dce:	f8cd a018 	str.w	sl, [sp, #24]
  401dd2:	9b08      	ldr	r3, [sp, #32]
  401dd4:	9305      	str	r3, [sp, #20]
  401dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401dd8:	9304      	str	r3, [sp, #16]
  401dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401ddc:	9303      	str	r3, [sp, #12]
  401dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401de0:	9302      	str	r3, [sp, #8]
  401de2:	2300      	movs	r3, #0
  401de4:	9301      	str	r3, [sp, #4]
  401de6:	2001      	movs	r0, #1
  401de8:	9000      	str	r0, [sp, #0]
  401dea:	4603      	mov	r3, r0
  401dec:	4602      	mov	r2, r0
  401dee:	4601      	mov	r1, r0
  401df0:	4c5c      	ldr	r4, [pc, #368]	; (401f64 <main+0x7f4>)
  401df2:	47a0      	blx	r4
  401df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
				
			if(ioport_get_pin_level(LED1)==0){
  401df6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401dfa:	d135      	bne.n	401e68 <main+0x6f8>
  401dfc:	e0aa      	b.n	401f54 <main+0x7e4>
  401dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401e00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401e04:	d130      	bne.n	401e68 <main+0x6f8>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  401e0a:	633b      	str	r3, [r7, #48]	; 0x30
				
				ioport_set_pin_level( LED1, 1);
				if(type == 0){D4++;}
  401e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401e0e:	b923      	cbnz	r3, 401e1a <main+0x6aa>
  401e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401e12:	3301      	adds	r3, #1
  401e14:	b2db      	uxtb	r3, r3
  401e16:	930b      	str	r3, [sp, #44]	; 0x2c
  401e18:	e00f      	b.n	401e3a <main+0x6ca>
				if(type == 1){D6++;}
  401e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401e1c:	2b01      	cmp	r3, #1
  401e1e:	d104      	bne.n	401e2a <main+0x6ba>
  401e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401e22:	3301      	adds	r3, #1
  401e24:	b2db      	uxtb	r3, r3
  401e26:	930a      	str	r3, [sp, #40]	; 0x28
  401e28:	e00f      	b.n	401e4a <main+0x6da>
				if(type == 2){D8++;}
  401e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401e2c:	2b02      	cmp	r3, #2
  401e2e:	d104      	bne.n	401e3a <main+0x6ca>
  401e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e32:	3301      	adds	r3, #1
  401e34:	b2db      	uxtb	r3, r3
  401e36:	9309      	str	r3, [sp, #36]	; 0x24
  401e38:	e00f      	b.n	401e5a <main+0x6ea>
				if(type == 3){D10++;}
  401e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401e3c:	2b03      	cmp	r3, #3
  401e3e:	d104      	bne.n	401e4a <main+0x6da>
  401e40:	9b08      	ldr	r3, [sp, #32]
  401e42:	3301      	adds	r3, #1
  401e44:	b2db      	uxtb	r3, r3
  401e46:	9308      	str	r3, [sp, #32]
  401e48:	e00e      	b.n	401e68 <main+0x6f8>
				if(type == 4){D12++;}
  401e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401e4c:	2b04      	cmp	r3, #4
  401e4e:	d104      	bne.n	401e5a <main+0x6ea>
  401e50:	f10a 0a01 	add.w	sl, sl, #1
  401e54:	fa5f fa8a 	uxtb.w	sl, sl
  401e58:	e006      	b.n	401e68 <main+0x6f8>
				if(type == 5){D20++;}
  401e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401e5c:	2b05      	cmp	r3, #5
  401e5e:	bf04      	itt	eq
  401e60:	f10b 0b01 	addeq.w	fp, fp, #1
  401e64:	fa5f fb8b 	uxtbeq.w	fp, fp
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401e68:	4b3f      	ldr	r3, [pc, #252]	; (401f68 <main+0x7f8>)
  401e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			}
			
			if(ioport_get_pin_level(LED2)==0){
  401e6c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401e70:	d138      	bne.n	401ee4 <main+0x774>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  401e76:	4a3c      	ldr	r2, [pc, #240]	; (401f68 <main+0x7f8>)
  401e78:	6313      	str	r3, [r2, #48]	; 0x30
  401e7a:	2300      	movs	r3, #0
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  401e7c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 401f78 <main+0x808>
  401e80:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 401f7c <main+0x80c>
  401e84:	4646      	mov	r6, r8
  401e86:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  401e8a:	469a      	mov	sl, r3
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401e8c:	f00a 0007 	and.w	r0, sl, #7
  401e90:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  401e94:	4b35      	ldr	r3, [pc, #212]	; (401f6c <main+0x7fc>)
  401e96:	4798      	blx	r3
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  401e98:	2010      	movs	r0, #16
  401e9a:	4b34      	ldr	r3, [pc, #208]	; (401f6c <main+0x7fc>)
  401e9c:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  401e9e:	2000      	movs	r0, #0
  401ea0:	4b32      	ldr	r3, [pc, #200]	; (401f6c <main+0x7fc>)
  401ea2:	4798      	blx	r3
  401ea4:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  401ea6:	ac1c      	add	r4, sp, #112	; 0x70
  401ea8:	2302      	movs	r3, #2
  401eaa:	f844 3d38 	str.w	r3, [r4, #-56]!
	spi_select_device(SSD1306_SPI, &device);
  401eae:	4621      	mov	r1, r4
  401eb0:	4630      	mov	r0, r6
  401eb2:	47c8      	blx	r9
  401eb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401eb8:	633b      	str	r3, [r7, #48]	; 0x30
  401eba:	2300      	movs	r3, #0
  401ebc:	f8c8 300c 	str.w	r3, [r8, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  401ec0:	2056      	movs	r0, #86	; 0x56
  401ec2:	4b2b      	ldr	r3, [pc, #172]	; (401f70 <main+0x800>)
  401ec4:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401ec6:	4621      	mov	r1, r4
  401ec8:	4630      	mov	r0, r6
  401eca:	4b2a      	ldr	r3, [pc, #168]	; (401f74 <main+0x804>)
  401ecc:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  401ece:	3d01      	subs	r5, #1
  401ed0:	d1e9      	bne.n	401ea6 <main+0x736>
  401ed2:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  401ed6:	f1ba 0f04 	cmp.w	sl, #4
  401eda:	d1d7      	bne.n	401e8c <main+0x71c>
  401edc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
				ioport_set_pin_level( LED2, 1);
				ssd1306_clear();
				quantitySel = 0;
  401ee0:	2300      	movs	r3, #0
  401ee2:	930d      	str	r3, [sp, #52]	; 0x34
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
			}
			
			if(ioport_get_pin_level(LED3)==0){
  401ee6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  401eea:	f47f acab 	bne.w	401844 <main+0xd4>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401eee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401ef2:	633b      	str	r3, [r7, #48]	; 0x30
				ioport_set_pin_level( LED3, 1);
				if(type == 0){D4--;}
  401ef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401ef6:	b923      	cbnz	r3, 401f02 <main+0x792>
  401ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401efa:	3b01      	subs	r3, #1
  401efc:	b2db      	uxtb	r3, r3
  401efe:	930b      	str	r3, [sp, #44]	; 0x2c
  401f00:	e00f      	b.n	401f22 <main+0x7b2>
				if(type == 1){D6--;}
  401f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f04:	2b01      	cmp	r3, #1
  401f06:	d104      	bne.n	401f12 <main+0x7a2>
  401f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401f0a:	3b01      	subs	r3, #1
  401f0c:	b2db      	uxtb	r3, r3
  401f0e:	930a      	str	r3, [sp, #40]	; 0x28
  401f10:	e00f      	b.n	401f32 <main+0x7c2>
				if(type == 2){D8--;}
  401f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f14:	2b02      	cmp	r3, #2
  401f16:	d104      	bne.n	401f22 <main+0x7b2>
  401f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f1a:	3b01      	subs	r3, #1
  401f1c:	b2db      	uxtb	r3, r3
  401f1e:	9309      	str	r3, [sp, #36]	; 0x24
  401f20:	e00f      	b.n	401f42 <main+0x7d2>
				if(type == 3){D10--;}
  401f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f24:	2b03      	cmp	r3, #3
  401f26:	d104      	bne.n	401f32 <main+0x7c2>
  401f28:	9b08      	ldr	r3, [sp, #32]
  401f2a:	3b01      	subs	r3, #1
  401f2c:	b2db      	uxtb	r3, r3
  401f2e:	9308      	str	r3, [sp, #32]
  401f30:	e488      	b.n	401844 <main+0xd4>
				if(type == 4){D12--;}
  401f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f34:	2b04      	cmp	r3, #4
  401f36:	d104      	bne.n	401f42 <main+0x7d2>
  401f38:	f10a 3aff 	add.w	sl, sl, #4294967295
  401f3c:	fa5f fa8a 	uxtb.w	sl, sl
  401f40:	e480      	b.n	401844 <main+0xd4>
				if(type == 5){D20--;}	
  401f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f44:	2b05      	cmp	r3, #5
  401f46:	f47f ac7d 	bne.w	401844 <main+0xd4>
  401f4a:	f10b 3bff 	add.w	fp, fp, #4294967295
  401f4e:	fa5f fb8b 	uxtb.w	fp, fp
  401f52:	e477      	b.n	401844 <main+0xd4>
  401f54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  401f58:	633b      	str	r3, [r7, #48]	; 0x30
  401f5a:	e766      	b.n	401e2a <main+0x6ba>
  401f5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  401f60:	633b      	str	r3, [r7, #48]	; 0x30
  401f62:	e75a      	b.n	401e1a <main+0x6aa>
  401f64:	0040149d 	.word	0x0040149d
  401f68:	400e0e00 	.word	0x400e0e00
  401f6c:	00400fed 	.word	0x00400fed
  401f70:	20000001 	.word	0x20000001
  401f74:	004003d9 	.word	0x004003d9
  401f78:	40008000 	.word	0x40008000
  401f7c:	004003ad 	.word	0x004003ad

00401f80 <__libc_init_array>:
  401f80:	b570      	push	{r4, r5, r6, lr}
  401f82:	4e0f      	ldr	r6, [pc, #60]	; (401fc0 <__libc_init_array+0x40>)
  401f84:	4d0f      	ldr	r5, [pc, #60]	; (401fc4 <__libc_init_array+0x44>)
  401f86:	1b76      	subs	r6, r6, r5
  401f88:	10b6      	asrs	r6, r6, #2
  401f8a:	bf18      	it	ne
  401f8c:	2400      	movne	r4, #0
  401f8e:	d005      	beq.n	401f9c <__libc_init_array+0x1c>
  401f90:	3401      	adds	r4, #1
  401f92:	f855 3b04 	ldr.w	r3, [r5], #4
  401f96:	4798      	blx	r3
  401f98:	42a6      	cmp	r6, r4
  401f9a:	d1f9      	bne.n	401f90 <__libc_init_array+0x10>
  401f9c:	4e0a      	ldr	r6, [pc, #40]	; (401fc8 <__libc_init_array+0x48>)
  401f9e:	4d0b      	ldr	r5, [pc, #44]	; (401fcc <__libc_init_array+0x4c>)
  401fa0:	1b76      	subs	r6, r6, r5
  401fa2:	f000 f99d 	bl	4022e0 <_init>
  401fa6:	10b6      	asrs	r6, r6, #2
  401fa8:	bf18      	it	ne
  401faa:	2400      	movne	r4, #0
  401fac:	d006      	beq.n	401fbc <__libc_init_array+0x3c>
  401fae:	3401      	adds	r4, #1
  401fb0:	f855 3b04 	ldr.w	r3, [r5], #4
  401fb4:	4798      	blx	r3
  401fb6:	42a6      	cmp	r6, r4
  401fb8:	d1f9      	bne.n	401fae <__libc_init_array+0x2e>
  401fba:	bd70      	pop	{r4, r5, r6, pc}
  401fbc:	bd70      	pop	{r4, r5, r6, pc}
  401fbe:	bf00      	nop
  401fc0:	004022ec 	.word	0x004022ec
  401fc4:	004022ec 	.word	0x004022ec
  401fc8:	004022f4 	.word	0x004022f4
  401fcc:	004022ec 	.word	0x004022ec

00401fd0 <__itoa>:
  401fd0:	1e93      	subs	r3, r2, #2
  401fd2:	2b22      	cmp	r3, #34	; 0x22
  401fd4:	d810      	bhi.n	401ff8 <__itoa+0x28>
  401fd6:	2a0a      	cmp	r2, #10
  401fd8:	b510      	push	{r4, lr}
  401fda:	d006      	beq.n	401fea <__itoa+0x1a>
  401fdc:	2300      	movs	r3, #0
  401fde:	460c      	mov	r4, r1
  401fe0:	4419      	add	r1, r3
  401fe2:	f000 f85d 	bl	4020a0 <__utoa>
  401fe6:	4620      	mov	r0, r4
  401fe8:	bd10      	pop	{r4, pc}
  401fea:	2800      	cmp	r0, #0
  401fec:	daf6      	bge.n	401fdc <__itoa+0xc>
  401fee:	232d      	movs	r3, #45	; 0x2d
  401ff0:	700b      	strb	r3, [r1, #0]
  401ff2:	4240      	negs	r0, r0
  401ff4:	2301      	movs	r3, #1
  401ff6:	e7f2      	b.n	401fde <__itoa+0xe>
  401ff8:	2000      	movs	r0, #0
  401ffa:	7008      	strb	r0, [r1, #0]
  401ffc:	4770      	bx	lr
  401ffe:	bf00      	nop

00402000 <itoa>:
  402000:	f7ff bfe6 	b.w	401fd0 <__itoa>

00402004 <memset>:
  402004:	b470      	push	{r4, r5, r6}
  402006:	0784      	lsls	r4, r0, #30
  402008:	d046      	beq.n	402098 <memset+0x94>
  40200a:	1e54      	subs	r4, r2, #1
  40200c:	2a00      	cmp	r2, #0
  40200e:	d041      	beq.n	402094 <memset+0x90>
  402010:	b2cd      	uxtb	r5, r1
  402012:	4603      	mov	r3, r0
  402014:	e002      	b.n	40201c <memset+0x18>
  402016:	1e62      	subs	r2, r4, #1
  402018:	b3e4      	cbz	r4, 402094 <memset+0x90>
  40201a:	4614      	mov	r4, r2
  40201c:	f803 5b01 	strb.w	r5, [r3], #1
  402020:	079a      	lsls	r2, r3, #30
  402022:	d1f8      	bne.n	402016 <memset+0x12>
  402024:	2c03      	cmp	r4, #3
  402026:	d92e      	bls.n	402086 <memset+0x82>
  402028:	b2cd      	uxtb	r5, r1
  40202a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40202e:	2c0f      	cmp	r4, #15
  402030:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402034:	d919      	bls.n	40206a <memset+0x66>
  402036:	f103 0210 	add.w	r2, r3, #16
  40203a:	4626      	mov	r6, r4
  40203c:	3e10      	subs	r6, #16
  40203e:	2e0f      	cmp	r6, #15
  402040:	f842 5c10 	str.w	r5, [r2, #-16]
  402044:	f842 5c0c 	str.w	r5, [r2, #-12]
  402048:	f842 5c08 	str.w	r5, [r2, #-8]
  40204c:	f842 5c04 	str.w	r5, [r2, #-4]
  402050:	f102 0210 	add.w	r2, r2, #16
  402054:	d8f2      	bhi.n	40203c <memset+0x38>
  402056:	f1a4 0210 	sub.w	r2, r4, #16
  40205a:	f022 020f 	bic.w	r2, r2, #15
  40205e:	f004 040f 	and.w	r4, r4, #15
  402062:	3210      	adds	r2, #16
  402064:	2c03      	cmp	r4, #3
  402066:	4413      	add	r3, r2
  402068:	d90d      	bls.n	402086 <memset+0x82>
  40206a:	461e      	mov	r6, r3
  40206c:	4622      	mov	r2, r4
  40206e:	3a04      	subs	r2, #4
  402070:	2a03      	cmp	r2, #3
  402072:	f846 5b04 	str.w	r5, [r6], #4
  402076:	d8fa      	bhi.n	40206e <memset+0x6a>
  402078:	1f22      	subs	r2, r4, #4
  40207a:	f022 0203 	bic.w	r2, r2, #3
  40207e:	3204      	adds	r2, #4
  402080:	4413      	add	r3, r2
  402082:	f004 0403 	and.w	r4, r4, #3
  402086:	b12c      	cbz	r4, 402094 <memset+0x90>
  402088:	b2c9      	uxtb	r1, r1
  40208a:	441c      	add	r4, r3
  40208c:	f803 1b01 	strb.w	r1, [r3], #1
  402090:	42a3      	cmp	r3, r4
  402092:	d1fb      	bne.n	40208c <memset+0x88>
  402094:	bc70      	pop	{r4, r5, r6}
  402096:	4770      	bx	lr
  402098:	4614      	mov	r4, r2
  40209a:	4603      	mov	r3, r0
  40209c:	e7c2      	b.n	402024 <memset+0x20>
  40209e:	bf00      	nop

004020a0 <__utoa>:
  4020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4020a2:	f8df e078 	ldr.w	lr, [pc, #120]	; 40211c <__utoa+0x7c>
  4020a6:	4616      	mov	r6, r2
  4020a8:	4604      	mov	r4, r0
  4020aa:	460f      	mov	r7, r1
  4020ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  4020b0:	b08b      	sub	sp, #44	; 0x2c
  4020b2:	466d      	mov	r5, sp
  4020b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4020b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  4020ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4020bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
  4020c0:	1eb3      	subs	r3, r6, #2
  4020c2:	f845 0b04 	str.w	r0, [r5], #4
  4020c6:	2b22      	cmp	r3, #34	; 0x22
  4020c8:	7029      	strb	r1, [r5, #0]
  4020ca:	d822      	bhi.n	402112 <__utoa+0x72>
  4020cc:	1e7d      	subs	r5, r7, #1
  4020ce:	4628      	mov	r0, r5
  4020d0:	2200      	movs	r2, #0
  4020d2:	e000      	b.n	4020d6 <__utoa+0x36>
  4020d4:	461a      	mov	r2, r3
  4020d6:	fbb4 f1f6 	udiv	r1, r4, r6
  4020da:	ab0a      	add	r3, sp, #40	; 0x28
  4020dc:	fb06 4411 	mls	r4, r6, r1, r4
  4020e0:	4423      	add	r3, r4
  4020e2:	460c      	mov	r4, r1
  4020e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
  4020e8:	f800 3f01 	strb.w	r3, [r0, #1]!
  4020ec:	1c53      	adds	r3, r2, #1
  4020ee:	2900      	cmp	r1, #0
  4020f0:	d1f0      	bne.n	4020d4 <__utoa+0x34>
  4020f2:	54f9      	strb	r1, [r7, r3]
  4020f4:	18bb      	adds	r3, r7, r2
  4020f6:	b14a      	cbz	r2, 40210c <__utoa+0x6c>
  4020f8:	7819      	ldrb	r1, [r3, #0]
  4020fa:	f815 0f01 	ldrb.w	r0, [r5, #1]!
  4020fe:	7029      	strb	r1, [r5, #0]
  402100:	3401      	adds	r4, #1
  402102:	1b11      	subs	r1, r2, r4
  402104:	428c      	cmp	r4, r1
  402106:	f803 0901 	strb.w	r0, [r3], #-1
  40210a:	dbf5      	blt.n	4020f8 <__utoa+0x58>
  40210c:	4638      	mov	r0, r7
  40210e:	b00b      	add	sp, #44	; 0x2c
  402110:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402112:	2000      	movs	r0, #0
  402114:	7038      	strb	r0, [r7, #0]
  402116:	b00b      	add	sp, #44	; 0x2c
  402118:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40211a:	bf00      	nop
  40211c:	004022b8 	.word	0x004022b8

00402120 <register_fini>:
  402120:	4b02      	ldr	r3, [pc, #8]	; (40212c <register_fini+0xc>)
  402122:	b113      	cbz	r3, 40212a <register_fini+0xa>
  402124:	4802      	ldr	r0, [pc, #8]	; (402130 <register_fini+0x10>)
  402126:	f000 b805 	b.w	402134 <atexit>
  40212a:	4770      	bx	lr
  40212c:	00000000 	.word	0x00000000
  402130:	00402141 	.word	0x00402141

00402134 <atexit>:
  402134:	2300      	movs	r3, #0
  402136:	4601      	mov	r1, r0
  402138:	461a      	mov	r2, r3
  40213a:	4618      	mov	r0, r3
  40213c:	f000 b814 	b.w	402168 <__register_exitproc>

00402140 <__libc_fini_array>:
  402140:	b538      	push	{r3, r4, r5, lr}
  402142:	4d07      	ldr	r5, [pc, #28]	; (402160 <__libc_fini_array+0x20>)
  402144:	4c07      	ldr	r4, [pc, #28]	; (402164 <__libc_fini_array+0x24>)
  402146:	1b2c      	subs	r4, r5, r4
  402148:	10a4      	asrs	r4, r4, #2
  40214a:	d005      	beq.n	402158 <__libc_fini_array+0x18>
  40214c:	3c01      	subs	r4, #1
  40214e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402152:	4798      	blx	r3
  402154:	2c00      	cmp	r4, #0
  402156:	d1f9      	bne.n	40214c <__libc_fini_array+0xc>
  402158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40215c:	f000 b8ca 	b.w	4022f4 <_fini>
  402160:	00402304 	.word	0x00402304
  402164:	00402300 	.word	0x00402300

00402168 <__register_exitproc>:
  402168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40216c:	4c25      	ldr	r4, [pc, #148]	; (402204 <__register_exitproc+0x9c>)
  40216e:	6825      	ldr	r5, [r4, #0]
  402170:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402174:	4606      	mov	r6, r0
  402176:	4688      	mov	r8, r1
  402178:	4692      	mov	sl, r2
  40217a:	4699      	mov	r9, r3
  40217c:	b3c4      	cbz	r4, 4021f0 <__register_exitproc+0x88>
  40217e:	6860      	ldr	r0, [r4, #4]
  402180:	281f      	cmp	r0, #31
  402182:	dc17      	bgt.n	4021b4 <__register_exitproc+0x4c>
  402184:	1c43      	adds	r3, r0, #1
  402186:	b176      	cbz	r6, 4021a6 <__register_exitproc+0x3e>
  402188:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40218c:	2201      	movs	r2, #1
  40218e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402192:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402196:	4082      	lsls	r2, r0
  402198:	4311      	orrs	r1, r2
  40219a:	2e02      	cmp	r6, #2
  40219c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4021a0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4021a4:	d01e      	beq.n	4021e4 <__register_exitproc+0x7c>
  4021a6:	3002      	adds	r0, #2
  4021a8:	6063      	str	r3, [r4, #4]
  4021aa:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4021ae:	2000      	movs	r0, #0
  4021b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021b4:	4b14      	ldr	r3, [pc, #80]	; (402208 <__register_exitproc+0xa0>)
  4021b6:	b303      	cbz	r3, 4021fa <__register_exitproc+0x92>
  4021b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4021bc:	f3af 8000 	nop.w
  4021c0:	4604      	mov	r4, r0
  4021c2:	b1d0      	cbz	r0, 4021fa <__register_exitproc+0x92>
  4021c4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4021c8:	2700      	movs	r7, #0
  4021ca:	e880 0088 	stmia.w	r0, {r3, r7}
  4021ce:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4021d2:	4638      	mov	r0, r7
  4021d4:	2301      	movs	r3, #1
  4021d6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4021da:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4021de:	2e00      	cmp	r6, #0
  4021e0:	d0e1      	beq.n	4021a6 <__register_exitproc+0x3e>
  4021e2:	e7d1      	b.n	402188 <__register_exitproc+0x20>
  4021e4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4021e8:	430a      	orrs	r2, r1
  4021ea:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4021ee:	e7da      	b.n	4021a6 <__register_exitproc+0x3e>
  4021f0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4021f4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4021f8:	e7c1      	b.n	40217e <__register_exitproc+0x16>
  4021fa:	f04f 30ff 	mov.w	r0, #4294967295
  4021fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402202:	bf00      	nop
  402204:	004022b4 	.word	0x004022b4
  402208:	00000000 	.word	0x00000000
  40220c:	00000001 	.word	0x00000001
  402210:	00000002 	.word	0x00000002
  402214:	00000004 	.word	0x00000004
  402218:	00000008 	.word	0x00000008
  40221c:	00000010 	.word	0x00000010
  402220:	00000020 	.word	0x00000020
  402224:	00000040 	.word	0x00000040
  402228:	00000080 	.word	0x00000080
  40222c:	00000100 	.word	0x00000100
  402230:	00000200 	.word	0x00000200
  402234:	00000400 	.word	0x00000400
  402238:	65707954 	.word	0x65707954
  40223c:	00000000 	.word	0x00000000
  402240:	6e617551 	.word	0x6e617551
  402244:	79746974 	.word	0x79746974
  402248:	00000000 	.word	0x00000000
  40224c:	6c6c6f52 	.word	0x6c6c6f52
  402250:	00000000 	.word	0x00000000
  402254:	72636e49 	.word	0x72636e49
  402258:	65736165 	.word	0x65736165
  40225c:	00000000 	.word	0x00000000
  402260:	6b636142 	.word	0x6b636142
  402264:	00000000 	.word	0x00000000
  402268:	72636544 	.word	0x72636544
  40226c:	65736165 	.word	0x65736165
  402270:	00000000 	.word	0x00000000
  402274:	69532d34 	.word	0x69532d34
  402278:	00646564 	.word	0x00646564
  40227c:	69532d36 	.word	0x69532d36
  402280:	00646564 	.word	0x00646564
  402284:	69532d38 	.word	0x69532d38
  402288:	00646564 	.word	0x00646564
  40228c:	532d3031 	.word	0x532d3031
  402290:	64656469 	.word	0x64656469
  402294:	00000000 	.word	0x00000000
  402298:	532d3231 	.word	0x532d3231
  40229c:	64656469 	.word	0x64656469
  4022a0:	00000000 	.word	0x00000000
  4022a4:	532d3032 	.word	0x532d3032
  4022a8:	64656469 	.word	0x64656469
  4022ac:	00000000 	.word	0x00000000
  4022b0:	00000043 	.word	0x00000043

004022b4 <_global_impure_ptr>:
  4022b4:	20000410 33323130 37363534 62613938     ... 0123456789ab
  4022c4:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
  4022d4:	76757473 7a797877 00000000              stuvwxyz....

004022e0 <_init>:
  4022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4022e2:	bf00      	nop
  4022e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4022e6:	bc08      	pop	{r3}
  4022e8:	469e      	mov	lr, r3
  4022ea:	4770      	bx	lr

004022ec <__init_array_start>:
  4022ec:	00402121 	.word	0x00402121

004022f0 <__frame_dummy_init_array_entry>:
  4022f0:	004000f1                                ..@.

004022f4 <_fini>:
  4022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4022f6:	bf00      	nop
  4022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4022fa:	bc08      	pop	{r3}
  4022fc:	469e      	mov	lr, r3
  4022fe:	4770      	bx	lr

00402300 <__fini_array_start>:
  402300:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <Font08px_58>:
2000000c:	4401 0000                                   .D..

20000010 <Font08px_59>:
20000010:	c401 0000                                   ....

20000014 <Font08px_UY>:
20000014:	0605 f008 0608 0000                         ........

2000001c <Font08px_91>:
2000001c:	fe03 8282                                   ....

20000020 <Font08px_92>:
20000020:	0603 c038                                   ..8.

20000024 <Font08px_93>:
20000024:	8203 fe82                                   ....

20000028 <Font08px_94>:
20000028:	0403 0402                                   ....

2000002c <Font08px_95>:
2000002c:	8003 8080                                   ....

20000030 <Font08px_96>:
20000030:	0202 0004                                   ....

20000034 <font_table>:
20000034:	0244 2000 0248 2000 024c 2000 0250 2000     D.. H.. L.. P.. 
20000044:	0258 2000 0260 2000 0268 2000 0270 2000     X.. `.. h.. p.. 
20000054:	0334 2000 0338 2000 033c 2000 0340 2000     4.. 8.. <.. @.. 
20000064:	0344 2000 0348 2000 034c 2000 0350 2000     D.. H.. L.. P.. 
20000074:	02e4 2000 02ec 2000 02f4 2000 02fc 2000     ... ... ... ... 
20000084:	01b0 2000 030c 2000 0234 2000 01b8 2000     ... ... 4.. ... 
20000094:	0324 2000 01c0 2000 000c 2000 0010 2000     $.. ... ... ... 
200000a4:	01c8 2000 01d0 2000 01d8 2000 01e0 2000     ... ... ... ... 
200000b4:	01e8 2000 0274 2000 027c 2000 0284 2000     ... t.. |.. ... 
200000c4:	01f4 2000 01fc 2000 0204 2000 020c 2000     ... ... ... ... 
200000d4:	02a0 2000 02a8 2000 02ac 2000 02b4 2000     ... ... ... ... 
200000e4:	02bc 2000 02c4 2000 02cc 2000 02d4 2000     ... ... ... ... 
200000f4:	02dc 2000 0214 2000 021c 2000 0224 2000     ... ... ... $.. 
20000104:	022c 2000 0304 2000 023c 2000 0314 2000     ,.. ... <.. ... 
20000114:	031c 2000 0014 2000 032c 2000 001c 2000     ... ... ,.. ... 
20000124:	0020 2000 0024 2000 0028 2000 002c 2000      .. $.. (.. ,.. 
20000134:	0030 2000 0354 2000 035c 2000 0364 2000     0.. T.. \.. d.. 
20000144:	036c 2000 0374 2000 037c 2000 0380 2000     l.. t.. |.. ... 
20000154:	0388 2000 0390 2000 0394 2000 0398 2000     ... ... ... ... 
20000164:	03a0 2000 03a4 2000 03ac 2000 03b4 2000     ... ... ... ... 
20000174:	03bc 2000 03c4 2000 03cc 2000 03d0 2000     ... ... ... ... 
20000184:	03d8 2000 03dc 2000 03e4 2000 03ec 2000     ... ... ... ... 
20000194:	03f4 2000 03fc 2000 0404 2000 028c 2000     ... ... ... ... 
200001a4:	0290 2000 0294 2000 0298 2000               ... ... ... 

200001b0 <Font08px_N4>:
200001b0:	3005 2428 20fe 0000                         .0($. ..

200001b8 <Font08px_N7>:
200001b8:	0205 f202 060a 0000                         ........

200001c0 <Font08px_N9>:
200001c0:	4c05 9292 7c92 0000                         .L...|..

200001c8 <Font08px_60>:
200001c8:	1004 4428 0082 0000                         ..(D....

200001d0 <Font08px_61>:
200001d0:	2804 2828 0028 0000                         .((((...

200001d8 <Font08px_62>:
200001d8:	8204 2844 0010 0000                         ..D(....

200001e0 <Font08px_63>:
200001e0:	0405 a202 0c12 0000                         ........

200001e8 <Font08px_64>:
200001e8:	3808 9244 aaaa 24ba 0018 0000               .8D....$....

200001f4 <Font08px_UD>:
200001f4:	fe04 8282 007c 0000                         ....|...

200001fc <Font08px_UE>:
200001fc:	fe04 9292 0082 0000                         ........

20000204 <Font08px_UF>:
20000204:	fe04 1212 0002 0000                         ........

2000020c <Font08px_UG>:
2000020c:	7c05 9282 f492 0000                         .|......

20000214 <Font08px_UQ>:
20000214:	7c05 a282 bc42 0000                         .|..B...

2000021c <Font08px_UR>:
2000021c:	fe04 3212 00cc 0000                         ...2....

20000224 <Font08px_US>:
20000224:	4c04 9292 0064 0000                         .L..d...

2000022c <Font08px_UT>:
2000022c:	0205 fe02 0202 0000                         ........

20000234 <Font08px_N6>:
20000234:	7c05 9292 6492 0000                         .|...d..

2000023c <Font08px_UV>:
2000023c:	0e05 c030 0e30 0000                         ..0.0...

20000244 <Font08px_32>:
20000244:	0002 0000                                   ....

20000248 <Font08px_33>:
20000248:	be01 0000                                   ....

2000024c <Font08px_34>:
2000024c:	0603 0600                                   ....

20000250 <Font08px_35>:
20000250:	2805 28fe 28fe 0000                         .(.(.(..

20000258 <Font08px_36>:
20000258:	4805 fe54 2454 0000                         .HT.T$..

20000260 <Font08px_37>:
20000260:	4605 1026 c4c8 0000                         .F&.....

20000268 <Font08px_38>:
20000268:	6c05 ac92 a040 0000                         .l..@...

20000270 <Font08px_39>:
20000270:	0601 0000                                   ....

20000274 <Font08px_UA>:
20000274:	f805 1214 f814 0000                         ........

2000027c <Font08px_UB>:
2000027c:	fe04 9292 006c 0000                         ....l...

20000284 <Font08px_UC>:
20000284:	7c04 8282 0044 0000                         .|..D...

2000028c <Font08px_123>:
2000028c:	1003 826c                                   ..l.

20000290 <Font08px_124>:
20000290:	fe01 0000                                   ....

20000294 <Font08px_125>:
20000294:	8203 106c                                   ..l.

20000298 <Font08px_126>:
20000298:	1005 1008 1020 0000                         .... ...

200002a0 <Font08px_UH>:
200002a0:	fe04 1010 00fe 0000                         ........

200002a8 <Font08px_UI>:
200002a8:	8203 82fe                                   ....

200002ac <Font08px_UJ>:
200002ac:	4004 8080 007e 0000                         .@..~...

200002b4 <Font08px_UK>:
200002b4:	fe05 2810 8244 0000                         ...(D...

200002bc <Font08px_UL>:
200002bc:	fe04 8080 0080 0000                         ........

200002c4 <Font08px_UM>:
200002c4:	fe05 0804 fe04 0000                         ........

200002cc <Font08px_UN>:
200002cc:	fe05 1804 fe60 0000                         ....`...

200002d4 <Font08px_UO>:
200002d4:	7c04 8282 007c 0000                         .|..|...

200002dc <Font08px_UP>:
200002dc:	fe04 1212 000c 0000                         ........

200002e4 <Font08px_N0>:
200002e4:	7c05 92a2 7c8a 0000                         .|...|..

200002ec <Font08px_N1>:
200002ec:	0005 fe84 0080 0000                         ........

200002f4 <Font08px_N2>:
200002f4:	8405 a2c2 8c92 0000                         ........

200002fc <Font08px_N3>:
200002fc:	4405 9282 6c92 0000                         .D...l..

20000304 <Font08px_UU>:
20000304:	7e04 8080 007e 0000                         .~..~...

2000030c <Font08px_N5>:
2000030c:	5e05 8a8a 728a 0000                         .^...r..

20000314 <Font08px_UW>:
20000314:	3e05 38c0 3ec0 0000                         .>.8.>..

2000031c <Font08px_UX>:
2000031c:	c605 1028 c628 0000                         ..(.(...

20000324 <Font08px_N8>:
20000324:	6c05 9292 6c92 0000                         .l...l..

2000032c <Font08px_UZ>:
2000032c:	c205 92a2 868a 0000                         ........

20000334 <Font08px_40>:
20000334:	3803 8244                                   .8D.

20000338 <Font08px_41>:
20000338:	8203 3844                                   ..D8

2000033c <Font08px_42>:
2000033c:	2803 2810                                   .(.(

20000340 <Font08px_43>:
20000340:	1003 1038                                   ..8.

20000344 <Font08px_44>:
20000344:	c001 0000                                   ....

20000348 <Font08px_45>:
20000348:	1003 1010                                   ....

2000034c <Font08px_46>:
2000034c:	8001 0000                                   ....

20000350 <Font08px_47>:
20000350:	c003 0638                                   ..8.

20000354 <Font08px_la>:
20000354:	7004 8888 00f8 0000                         .p......

2000035c <Font08px_lb>:
2000035c:	fe04 8888 0070 0000                         ....p...

20000364 <Font08px_lc>:
20000364:	7004 8888 0088 0000                         .p......

2000036c <Font08px_ld>:
2000036c:	7004 8888 00fe 0000                         .p......

20000374 <Font08px_le>:
20000374:	7004 a8a8 0030 0000                         .p..0...

2000037c <Font08px_lf>:
2000037c:	fc03 0212                                   ....

20000380 <Font08px_lg>:
20000380:	1004 a8a8 0078 0000                         ....x...

20000388 <Font08px_lh>:
20000388:	fe04 0810 00f0 0000                         ........

20000390 <Font08px_li>:
20000390:	fa01 0000                                   ....

20000394 <Font08px_lj>:
20000394:	8002 007a                                   ..z.

20000398 <Font08px_lk>:
20000398:	fe04 5020 0088 0000                         .. P....

200003a0 <Font08px_ll>:
200003a0:	fe01 0000                                   ....

200003a4 <Font08px_lm>:
200003a4:	f805 f008 f008 0000                         ........

200003ac <Font08px_ln>:
200003ac:	f804 0810 00f0 0000                         ........

200003b4 <Font08px_lo>:
200003b4:	7004 8888 0070 0000                         .p..p...

200003bc <Font08px_lp>:
200003bc:	f804 2828 0010 0000                         ..((....

200003c4 <Font08px_lq>:
200003c4:	1004 2828 00f8 0000                         ..((....

200003cc <Font08px_lr>:
200003cc:	f803 0810                                   ....

200003d0 <Font08px_ls>:
200003d0:	9004 a8a8 0048 0000                         ....H...

200003d8 <Font08px_lt>:
200003d8:	0803 887c                                   ..|.

200003dc <Font08px_lu>:
200003dc:	7804 8080 00f8 0000                         .x......

200003e4 <Font08px_lv>:
200003e4:	1805 8060 1860 0000                         ..`.`...

200003ec <Font08px_lw>:
200003ec:	3805 30c0 38c0 0000                         .8.0.8..

200003f4 <Font08px_lx>:
200003f4:	8805 2050 8850 0000                         ..P P...

200003fc <Font08px_ly>:
200003fc:	1804 a0a0 0078 0000                         ....x...

20000404 <Font08px_lz>:
20000404:	c803 98a8                                   ....

20000408 <SystemCoreClock>:
20000408:	0900 003d 0000 0000                         ..=.....

20000410 <impure_data>:
20000410:	0000 0000 06fc 2000 0764 2000 07cc 2000     ....... d.. ... 
	...
20000444:	22b0 0040 0000 0000 0000 0000 0000 0000     ."@.............
	...
200004b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200004c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
